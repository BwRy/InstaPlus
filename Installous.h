/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSRange {
	unsigned _field1;
	unsigned _field2;
} NSRange;

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct UIEdgeInsets {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
} UIEdgeInsets;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct dispatch_source_s dispatch_source_s;

typedef struct __aslclient aslclient;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct in6_addr {
	union {
		unsigned char _field1[16];
		unsigned short _field2[8];
		unsigned _field3[4];
	} _field1;
} in6_addr;

typedef struct sockaddr_in6 {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned _field4;
	in6_addr _field5;
	unsigned _field6;
} sockaddr_in6;

typedef struct __CFSocket* CFSocketRef;

typedef struct JKHashTableEntry {
	unsigned _field1;
	id _field2;
	id _field3;
} JKHashTableEntry;

typedef struct JKConstPtrRange {
	char* _field1;
	unsigned _field2;
} JKConstPtrRange;

typedef struct JKConstBuffer {
	JKConstPtrRange _field1;
} JKConstBuffer;

typedef struct JKTokenCacheItem* JKTokenCacheItemRef;

typedef struct JKTokenValue {
	JKConstPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
	union {
		long long _field1;
		unsigned long long _field2;
		double _field3;
	} _field4;
	JKTokenCacheItemRef _field5;
} JKTokenValue;

typedef struct JKPtrRange {
	char* _field1;
	unsigned _field2;
} JKPtrRange;

typedef struct JKManagedBuffer {
	JKPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
} JKManagedBuffer;

typedef struct JKParseToken {
	JKConstPtrRange _field1;
	unsigned _field2;
	JKTokenValue _field3;
	JKManagedBuffer _field4;
} JKParseToken;

typedef struct JKObjectStack {
	void** _field1;
	void** _field2;
	unsigned* _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
} JKObjectStack;

typedef struct JKTokenCache {
	JKTokenCacheItemRef _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned char _field4[1024];
} JKTokenCache;

typedef struct JKObjCImpCache {
	Class _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
} JKObjCImpCache;

typedef struct JKParseState {
	unsigned _field1;
	JKConstBuffer _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	JKParseToken _field9;
	JKObjectStack _field10;
	JKTokenCache _field11;
	JKObjCImpCache _field12;
	id _field13;
	int _field14;
	BOOL _field15;
} JKParseState;

typedef struct tr_session tr_session;

typedef struct tr_torrent tr_torrent;

typedef struct tr_stat {
	int _field1;
	int _field2;
	int _field3;
	BOOL _field4[512];
	float _field5;
	float _field6;
	float _field7;
	float _field8;
	float _field9;
	float _field10;
	float _field11;
	float _field12;
	float _field13;
	int _field14;
	int _field15;
	int _field16;
	int _field17[7];
	int _field18;
	int _field19;
	int _field20;
	unsigned long long _field21;
	unsigned long long _field22;
	unsigned long long _field23;
	unsigned long long _field24;
	unsigned long long _field25;
	unsigned long long _field26;
	unsigned long long _field27;
	unsigned long long _field28;
	int _field29;
	float _field30;
	int _field31;
	int _field32;
	int _field33;
	int _field34;
	int _field35;
	int _field36;
	int _field37;
	bool _field38;
	int _field39;
	bool _field40;
} tr_stat;

typedef struct tr_file tr_file;

typedef struct tr_piece tr_piece;

typedef struct tr_tracker_info tr_tracker_info;

typedef struct tr_info {
	unsigned long long _field1;
	char* _field2;
	char* _field3;
	char** _field4;
	char* _field5;
	char* _field6;
	tr_file* _field7;
	tr_piece* _field8;
	tr_tracker_info* _field9;
	int _field10;
	int _field11;
	int _field12;
	unsigned _field13;
	unsigned _field14;
	unsigned _field15;
	unsigned char _field16[20];
	BOOL _field17[41];
	bool _field18;
	bool _field19;
} tr_info;

typedef struct tr_file_stat {
	unsigned long long _field1;
	float _field2;
} tr_file_stat;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct CGImage* CGImageRef;

typedef struct CGContext* CGContextRef;

typedef struct CGAffineTransform {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} CGAffineTransform;

typedef struct _DDRange {
	unsigned long long _field1;
	unsigned long long _field2;
} DDRange;

@protocol NSObject
-(id)debugDescription;
-(id)description;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(NSZone*)zone;
-(id)self;
-(Class)class;
-(Class)superclass;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;


@end

@protocol LSReceiveServerDelegate <NSObject>
-(void)receiveServer:(id)server didReceiveIPAURLFromConnection:(id)connection;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol ApplicationViewControllerDelegate
-(void)applicationViewControllerDidStartDownload:(id)applicationViewController;
@end

@protocol DownloadWebViewControllerDelegate
-(void)downloadWebViewControllerStartedDownload:(id)download;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol MHFileUploadDelegate
-(void)fileUpload:(id)upload failedWithError:(id)error;
-(void)fileUpload:(id)upload didChangeProgress:(float)progress;
-(void)fileUploadDidFinishUpload:(id)fileUpload;
@end

@protocol SelectDownloadTableViewControllerDelegate
-(void)selectDownloadTableViewControllerDidCancel:(id)selectDownloadTableViewController;
-(void)selectDownloadTableViewControllerDidStartDownload:(id)selectDownloadTableViewController;
@end

@protocol ScreenshotScrollViewDelegate
-(void)screenshotScrollViewDidMoveScreenshots:(id)screenshotScrollView;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol IconDownloadManagerDelegate
-(void)iconDownloadManagerFinishedAllDownloads:(id)downloads;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol UITableViewCellWithTextFieldDelegate
-(void)cellWithTextFieldDidEnterText:(id)cellWithTextField;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol DownloadManagerDelegate
-(void)downloadManagerValueChanged;
@end

@protocol INDownloadQueueDelegate
-(void)queueChangedNumberOfDownloads:(id)downloads;
@end

@protocol UITableViewAlertViewDelegate
-(void)alertViewDidCancel:(id)alertView;
-(void)alertView:(id)view didSelectItemAtIndex:(unsigned)index;
@end

@protocol LSServiceBrowserDelegate
-(void)serviceBrowserDidUpdateClients:(id)serviceBrowser;
@end

@protocol HackedWebPluginManagerDelegate
-(void)pluginHacked;
@end

@protocol IPADownloadDelegate
@optional
-(void)iPADownload:(id)download failedToDownloadWithError:(id)error;
-(void)iPADownloadFinishedDownload:(id)download;
-(void)iPADownloadStartedDownloadingIPA:(id)ipa;
-(void)iPADownloadFailedToDownloadIPABecauseFileAlreadyExisted:(id)downloadIPABecauseFileAlreadyExisted;
-(void)iPADownloadFailedToDownloadIPA:(id)downloadIPA;
@end

@protocol InstallationWrapperDelegate
-(void)installationWrapper:(id)wrapper failedToInstallWithError:(id)error;
-(void)installationWrapperIsDoneInstallingIPA:(id)ipa;
@end

@protocol ScreenshotScrollViewImagesContainerDelegate
-(void)container:(id)container recievedZoomRequestForScreenshot:(id)screenshot;
-(void)container:(id)container movedToScreenshotAtIndex:(int)index;
-(void)containerMovedScreenshots:(id)screenshots;
@end

@protocol IconDownloadManagerItem
-(void)download;
@end

@protocol ScreenshotScrollViewImageDelegate
-(void)screenshotScrollViewImageTouchedDown:(id)down;
@end

@protocol IPADownloadProgressDelegate
@optional
-(void)iPADownloadEndedTransfer:(id)transfer;
-(void)iPADownload:(id)download updatedProgress:(double)progress withSpeedInBytes:(double)bytes secondsRemaining:(float)remaining;
@end

@protocol INHomePageCacheDelegate
-(void)homePageCacheDidEndCaching:(id)homePageCache;
-(void)homePageCacheDidStartCaching:(id)homePageCache;
@end

@protocol INSearchViewControllerDelegate <NSObject>
-(void)searchViewController:(id)controller didSelectApplication:(id)application;
@end

@protocol INUpdatesViewControllerDelegate <NSObject>
-(void)updatesViewController:(id)controller didSelectApplication:(id)application;
@end

@protocol DVExistingFileViewDelegate
-(void)userTapedView:(id)view;
@end

@protocol DVExistingFileDetailedViewControllerDelegate
-(void)existingFileDetailedViewControllerDeleteButtonClicked:(id)clicked;
-(void)existingFileDetailedViewControllerInstallButtonClicked:(id)clicked;
-(void)existingFileDetailedViewControllerSendButtonClicked:(id)clicked;
@end

@protocol SettingsViewControllerDelegate
-(void)settingsViewControllerClearedCategoryCache:(id)cache;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol APIApplicationDelegate <NSObject>
@optional
-(void)application:(id)application didFailToDownloadScreenshotsWithError:(id)error;
-(void)applicationDidDownloadScreenshots:(id)application;
-(void)application:(id)application didFailToDownloadLinksWithError:(id)error;
-(void)applicationDidDownloadLinks:(id)application;
-(void)application:(id)application didFailToDownloadDataWithError:(id)error;
-(void)applicationDidDownloadData:(id)application;
-(void)applicationDidLoadImage:(id)application;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol UISearchBarDelegate <NSObject>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol APICategoryDelegate <NSObject>
-(void)categoryDidResetApplications:(id)category;
-(void)category:(id)category didFailToLoadNextPageWithError:(id)error;
-(void)categoryDidLoadNextPage:(id)category;
-(void)categoryWillStartLoading:(id)category;
@end

@protocol NSNetServiceDelegate <NSObject>
@optional
-(void)netService:(id)service didUpdateTXTRecordData:(id)data;
-(void)netServiceDidStop:(id)netService;
-(void)netService:(id)service didNotResolve:(id)resolve;
-(void)netServiceDidResolveAddress:(id)netService;
-(void)netServiceWillResolve:(id)netService;
-(void)netService:(id)service didNotPublish:(id)publish;
-(void)netServiceDidPublish:(id)netService;
-(void)netServiceWillPublish:(id)netService;
@end

@protocol HTTPResponse
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
@optional
-(void)connectionDidClose;
-(BOOL)isChunked;
-(id)httpHeaders;
-(int)status;
-(BOOL)delayResponeHeaders;
@end

@protocol DDLogger <NSObject>
-(void)setLogFormatter:(id)formatter;
-(id)logFormatter;
-(void)logMessage:(id)message;
@optional
-(id)loggerName;
-(dispatch_queue_s*)loggerQueue;
-(void)willRemoveLogger;
-(void)didAddLogger;
@end

@protocol DDLogFileManager <NSObject>
@property(assign) unsigned maximumNumberOfLogFiles;
-(id)createNewLogFile;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(id)logsDirectory;
@optional
-(void)didRollAndArchiveLogFile:(id)file;
-(void)didArchiveLogFile:(id)file;
@end

@protocol DDLogFormatter <NSObject>
-(id)formatLogMessage:(id)message;
@end

@protocol NWConnectionDelegate
-(void)connectionDidConnect:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connectionTerminated:(id)terminated;
-(void)connectionAttemptFailed:(id)failed;
@end

@protocol NWServerDelegate
-(void)handleNewConnection:(id)connection;
-(void)serverFailed:(id)failed reason:(id)reason;
@end

@protocol LSReceiveConnectionDelegate <NSObject>
-(void)connectionDidReceiveIPAURL:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinish:(id)connection;
@end

@protocol NWServerBrowserDelegate
-(void)updateServerList;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>
@optional
-(void)netServiceBrowser:(id)browser didRemoveService:(id)service moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didRemoveDomain:(id)domain moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didFindService:(id)service moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didFindDomain:(id)domain moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didNotSearch:(id)search;
-(void)netServiceBrowserDidStopSearch:(id)netServiceBrowser;
-(void)netServiceBrowserWillSearch:(id)netServiceBrowser;
@end

@protocol APIUpdatesManagerDelegate <NSObject>
-(void)updatesManager:(id)manager didFailToSearchForUpdates:(id)updates;
-(void)updatesManagerDidUpdateApplicationsWithUpdates:(id)updatesManager;
-(void)updatesManagerWillStartDownloadingUpdates:(id)updatesManager;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol NSMutableCopying
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol TRTorrentDelegate <NSObject>
@optional
-(void)TRTorrentIdleLimitHit:(id)hit;
-(void)TRTorrentStatsUpdated:(id)updated;
-(void)TRTorrentDidFinishDownloading:(id)trtorrent;
-(void)TRTorrentReceivedMetadata:(id)metadata;
@end

__attribute__((visibility("hidden")))
@interface InstallousAppDelegate : XXUnknownSuperclass <UIApplicationDelegate, LSReceiveServerDelegate, UIAlertViewDelegate> {
	UIWindow* _window;
}
@property(retain, nonatomic) UIWindow* window;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)removeSingleNotification:(id)notification;
-(void)suggestLocalITunesIDsThread;
-(void)receiveServer:(id)server didReceiveIPAURLFromConnection:(id)connection;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)dealloc;
-(void)restoreTorrents;
-(void)clearUneededPartFiles;
-(void)kill;
-(void)checkOutdated;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)deleteNotifications;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface InstallousAppDelegate_iPhone : InstallousAppDelegate <UIApplicationDelegate, UITabBarControllerDelegate, ApplicationViewControllerDelegate, DownloadWebViewControllerDelegate> {
	UIWindow* window;
	UINavigationController* navDownloadsNew;
	UINavigationController* navSettings;
	UITabBarController* tBarController;
	INHomePageViewController* _homePageViewController;
	unsigned _backgroundTaskIdentifier;
	INCategoryViewController* _categoryViewController;
	INSearchViewController* _searchViewController;
	INUpdatesViewController* _updatesViewController;
}
@property(retain, nonatomic) INUpdatesViewController* updatesViewController;
@property(retain, nonatomic) INSearchViewController* searchViewController;
@property(retain, nonatomic) INCategoryViewController* categoryViewController;
@property(retain, nonatomic) UITabBarController* tBarController;
@property(retain, nonatomic) INHomePageViewController* homePageViewController;
@property(retain, nonatomic) UINavigationController* navSettings;
@property(retain, nonatomic) UINavigationController* navDownloadsNew;
@property(retain, nonatomic) UIWindow* window;
-(void)downloadWebViewControllerStartedDownload:(id)download;
-(void)viewControllerDidCancel;
-(void)applicationViewControllerDidStartDownload:(id)applicationViewController;
-(void)dealloc;
-(void)settingsDoneButtonClicked;
-(void)searchButtonClicked:(id)clicked;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(BOOL)handleURL:(id)url;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface InstallousAppDelegate_iPad : InstallousAppDelegate <UIApplicationDelegate, UINavigationControllerDelegate, DownloadWebViewControllerDelegate> {
	INCategoryViewController* _categoryViewController;
	ApplicationViewController_Pad* applicationViewController;
	DownloadsViewController* downloadsViewController;
	UINavigationController* _searchNavigationController;
	INSearchViewController* _seachViewController;
	SettingsTableViewController* settingsViewController;
	INUpdatesViewController* updatesViewController;
	UISplitViewController* _splitViewController;
}
@property(retain, nonatomic) UIWindow* window;
@property(retain, nonatomic) UISplitViewController* splitViewController;
@property(retain, nonatomic) INUpdatesViewController* updatesViewController;
@property(retain, nonatomic) SettingsTableViewController* settingsViewController;
@property(retain, nonatomic) UINavigationController* searchNavigationController;
@property(retain, nonatomic) INSearchViewController* seachViewController;
@property(retain, nonatomic) DownloadsViewController* downloadsViewController;
@property(retain, nonatomic) ApplicationViewController_Pad* applicationViewController;
@property(retain, nonatomic) INCategoryViewController* categoryViewController;
-(void)downloadWebViewControllerStartedDownload:(id)download;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(BOOL)handleURL:(id)url;
-(void)dismissDownloadViewController;
-(void)dealloc;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface INProgressView : XXUnknownSuperclass {
	float _progress;
	CGRect _progressRect;
	UIColor* _progressBarBackgroundColor;
	UIColor* _progressBarTintColor;
	UIColor* _tintColor;
	id _outerPath;
	id _innerPath;
}
@property(retain, nonatomic) UIColor* tintColor;
@property(retain, nonatomic) UIColor* progressBarTintColor;
@property(retain, nonatomic) UIColor* progressBarBackgroundColor;
@property(retain, nonatomic) id innerPath;
@property(retain, nonatomic) id outerPath;
@property(assign, nonatomic) float progress;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(void)setFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MHRequest : XXUnknownSuperclass {
}
+(id)sendSynchronousRequest:(id)request;
+(id)encryptRequest:(id)request usedKeyData:(id*)data;
+(id)sendLocalITunesIDs:(id)ids;
+(id)UBIDForBundle:(id)bundle;
+(id)requestFilesInBundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MHBundle : XXUnknownSuperclass {
	NSString* _rootDirectoyPath;
	NSString* _fullBundlePath;
	NSString* _uniqueIdentifier;
	NSString* _sid;
	NSDictionary* _consistencyIndex;
	NSMutableDictionary* _relativeFilePathesForMD5Hash;
	NSString* _crackedBinaryPath;
}
@property(retain) NSString* crackedBinaryPath;
@property(retain) NSMutableDictionary* relativeFilePathesForMD5Hash;
@property(retain, nonatomic) NSDictionary* consistencyIndex;
@property(retain) NSString* SID;
@property(retain) NSString* uniqueIdentifier;
@property(retain, nonatomic) NSString* fullBundlePath;
@property(retain, nonatomic) NSString* rootDirectoyPath;
+(id)dumpLegitiTunesIDsAndStoreDirectoriesInDictionary:(id*)dictionary;
+(id)bundleWithRootDirectory:(id)rootDirectory;
+(void)cleanPreCrackedBinaries;
-(void)dealloc;
-(id)requestForReuqestedFileFromMD5Hash:(id)md5Hash;
-(BOOL)verifyFileAtRelativePath:(id)relativePath;
-(void)buildConsistencyIndex;
-(id)relativeFilePathFromMD5Hash:(id)md5Hash;
-(id)initWithRootDirectory:(id)rootDirectory;
@end

__attribute__((visibility("hidden")))
@interface MHCloudConnection : XXUnknownSuperclass <MHFileUploadDelegate> {
	BOOL _enabled;
	BOOL _communicatingWithCloud;
	NSString* _status;
	MHFileUpload* _pendingFileUpload;
}
@property(retain) MHFileUpload* pendingFileUpload;
@property(readonly, assign, nonatomic, getter=isCommunicatingWithCloud) BOOL communicatingWithCloud;
@property(retain, nonatomic) NSString* status;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
+(id)sharedConnection;
-(void)dealloc;
-(void)fileUpload:(id)upload failedWithError:(id)error;
-(void)fileUpload:(id)upload didChangeProgress:(float)progress;
-(void)fileUploadDidFinishUpload:(id)fileUpload;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MHFileUpload : XXUnknownSuperclass {
	NSURLConnection* _connection;
	id<MHFileUploadDelegate> _delegate;
	NSString* _fileName;
	MHBundle* _bundle;
	NSMutableData* _responseData;
}
@property(retain) NSMutableData* responseData;
@property(retain) MHBundle* bundle;
@property(retain) NSString* fileName;
@property(retain) NSURLConnection* connection;
@property(assign) id<MHFileUploadDelegate> delegate;
+(id)uploadWithRequest:(id)request andDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithRequest:(id)request andDelegate:(id)delegate;
-(void)cancel;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
@end

__attribute__((visibility("hidden")))
@interface ApplicationViewController : XXUnknownSuperclass <SelectDownloadTableViewControllerDelegate, ScreenshotScrollViewDelegate, UIScrollViewDelegate, IconDownloadManagerDelegate> {
	UIScrollView* scrollContainer;
	UIButton* priceButton;
	UIButton* downloadButton;
	UILabel* versionLabel;
	ScreenshotScrollView* screenshotScrollView;
	UIImage* applicationImage;
	UIActivityIndicatorView* loadingIndicatorView;
	UILabel* loadingLabel;
	BOOL downloadButtonIsClicked;
	BOOL _displayQueueButton;
	BOOL _updatesViewController;
	int applicationID;
	APIApplicationIntern* application;
	id<ApplicationViewControllerDelegate> _delegate;
	UIImageView* _iconImageView;
	UIImageView* _animatingImageViewForStartedDownload;
	BOOL _displayAnimationOnViewDidAppear;
}
@property(retain, nonatomic) UIImageView* animatingImageViewForStartedDownload;
@property(retain, nonatomic) UIImageView* iconImageView;
@property(retain, nonatomic) APIApplicationIntern* application;
@property(assign) int applicationID;
@property(assign, nonatomic, getter=isUpdatesViewController) BOOL updatesViewController;
@property(assign) BOOL downloadButtonIsClicked;
@property(retain, nonatomic) UILabel* loadingLabel;
@property(retain, nonatomic) UIActivityIndicatorView* loadingIndicatorView;
@property(retain, nonatomic) UIImage* applicationImage;
@property(retain, nonatomic) ScreenshotScrollView* screenshotScrollView;
@property(retain, nonatomic) UILabel* versionLabel;
@property(retain, nonatomic) UIButton* downloadButton;
@property(retain, nonatomic) UIButton* priceButton;
@property(retain, nonatomic) UIScrollView* scrollContainer;
@property(assign) id<ApplicationViewControllerDelegate> delegate;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)selectDownloadTableViewControllerDidCancel:(id)selectDownloadTableViewController;
-(void)selectDownloadTableViewControllerDidStartDownload:(id)selectDownloadTableViewController;
-(void)finalizeViewForStartedDownload;
-(void)animateApplicationIconForStartedDownload;
-(void)prepareViewForAnimatingApplicationIconForStartedDownload;
-(void)animateStartedDownload;
-(void)displayApplicationInScrollContainer;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)queueButtonClicked:(id)clicked;
-(void)downloadButtonClicked:(id)clicked;
-(void)receivedApplicationData;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)screenshotScrollViewDidMoveScreenshots:(id)screenshotScrollView;
-(void)failedToLoadApplicationData:(id)loadApplicationData;
-(void)failedToLoadScreenshots:(id)loadScreenshots;
-(void)didReceiveAPIScreenshotResponse:(id)response;
-(void)loadScreenshots;
-(void)loadApplicationData;
-(void)applicationIconImageDidLoad:(id)applicationIconImage;
-(void)loadIconForImageView:(id)imageView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)iconDownloadManagerFinishedAllDownloads:(id)downloads;
-(id)initWithApplicationID:(int)applicationID shouldDisplayQueueButton:(BOOL)button;
-(id)initWithApplicationID:(int)applicationID;
@end

__attribute__((visibility("hidden")))
@interface INNotificationQueue : XXUnknownSuperclass {
	UIView* _notificationView;
	CGPoint _notificationCenterPoint;
	NSMutableArray* _notifications;
}
@property(retain) NSMutableArray* notifications;
@property(assign) CGPoint notificationCenterPoint;
@property(retain) UIView* notificationView;
+(id)sharedQueue;
-(void)detachSmallNotificationWithTitle:(id)title andSubtitle:(id)subtitle removeStyle:(int)style;
-(void)detachLargeNotificationWithImage:(id)image andTitle:(id)title removeStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INNotificationQueueItem : XXUnknownSuperclass {
	UILabel* _titleLabel;
	UILabel* _descriptionLabel;
	UIImageView* _imageView;
	UIImageView* _backgroundImageView;
	int _style;
	int _removeStyle;
}
@property(assign) int removeStyle;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UILabel* descriptionLabel;
@property(retain, nonatomic) UILabel* titleLabel;
+(id)itemWithStyle:(int)style;
-(void)dealloc;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface CategoryWrapper : XXUnknownSuperclass <NSCoding> {
	int categoryID;
	NSString* categoryName;
	UIImage* categoryImage;
}
@property(assign) int categoryID;
@property(retain, nonatomic) UIImage* categoryImage;
@property(retain, nonatomic) NSString* categoryName;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(int)caseInsensitiveCompare:(id)compare;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface CategorySortWrapper : XXUnknownSuperclass {
	NSString* sortOptionName;
	UIImage* sortOptionImage;
	int sortOptionID;
}
@property(assign) int sortOptionID;
@property(retain, nonatomic) UIImage* sortOptionImage;
@property(retain, nonatomic) NSString* sortOptionName;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NotificationViewController : XXUnknownSuperclass <UIWebViewDelegate> {
	UIWebView* webView;
	NSURL* navigateTo;
	NSObject<NotificationViewControllerDelegate>* delegate;
}
@property(assign, nonatomic) NSObject<NotificationViewControllerDelegate>* delegate;
@property(retain, nonatomic) NSURL* navigateTo;
@property(retain, nonatomic) UIWebView* webView;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)doneButtonClicked;
-(void)viewDidLoad;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface SettingsTableViewCellWithSwitch : XXUnknownSuperclass {
	UISwitch* switchButton;
	UILabel* displayLabel;
}
@property(readonly, assign) UILabel* displayLabel;
@property(readonly, assign) UISwitch* switchButton;
-(void)dealloc;
-(void)awakeFromNib;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface UITableViewCellWithTextField : XXUnknownSuperclass <UITextFieldDelegate> {
	UITextField* _textField;
	id<UITableViewCellWithTextFieldDelegate> _delegate;
}
@property(assign, nonatomic) id<UITableViewCellWithTextFieldDelegate> delegate;
@property(retain, nonatomic) UITextField* textField;
-(void)dealloc;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(BOOL)textFieldShouldReturn:(id)textField;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface SettingsTableViewController : XXUnknownSuperclass <UITextFieldDelegate, UITableViewCellWithTextFieldDelegate> {
	SettingsTableViewCellWithSwitch* cellWithSwitch;
	NSObject<SettingsViewControllerDelegate>* delegate;
	UITableViewCellWithTextField* _usernameCell;
	UITableViewCellWithTextField* _passwordCell;
}
@property(retain, nonatomic) UITableViewCellWithTextField* passwordCell;
@property(retain, nonatomic) UITableViewCellWithTextField* usernameCell;
@property(assign, nonatomic) NSObject<SettingsViewControllerDelegate>* delegate;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)switchAction:(id)action;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)deleteAutomaticallyChanged:(id)changed;
-(void)installAutomaticallyChanged:(id)changed;
-(void)localNotificationsChanged:(id)changed;
-(void)onlyIPadAppsChanged:(id)changed;
-(void)itunesSyncChanged:(id)changed;
-(void)localSharingChanged:(id)changed;
-(void)removeFakeMetadataChanged:(id)changed;
-(void)aboutButton;
-(void)checkUserAuthThread:(id)thread;
-(void)didAuthUser:(id)user;
-(void)reportError:(id)error;
-(void)mobileHuntEnabledChanged:(id)changed;
-(void)cloudConnectionStatusChanged:(id)changed;
-(void)externURLAdressChanged:(id)changed;
-(void)upnpStatusChanged:(id)changed;
-(void)cellWithTextFieldDidEnterText:(id)cellWithTextField;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface SettingsHelper : XXUnknownSuperclass {
}
+(void)registerDefaults;
+(void)setBindPort:(unsigned)port;
+(void)setUsesMobileData:(BOOL)data;
+(BOOL)usesMobileData;
+(unsigned)maxTorrentPeers;
+(void)setMaxGlobalpeers:(unsigned)globalpeers;
+(unsigned)maxGlobalPeers;
+(void)setMaxTorrentPeers:(unsigned)peers;
+(unsigned)bindPort;
+(void)setRandomizePort:(BOOL)port;
+(BOOL)randomizePort;
+(void)setUPNPEnabled:(BOOL)enabled;
+(BOOL)UPNPEnabled;
+(void)setLastVersionForCategoryUpdate:(id)categoryUpdate;
+(id)lastVersionForCategoryUpdate;
+(void)setLastCategoriesUpdate:(id)update;
+(id)lastCategoriesUpdate;
+(void)setUpdatesBadgeValue:(int)value;
+(int)updatesBadgeValue;
+(void)setRemoveFakeMetadata:(BOOL)metadata;
+(BOOL)removeFakeMetadata;
+(void)setLocalSharing:(BOOL)sharing;
+(BOOL)localSharing;
+(void)invalidUserAuth;
+(void)setUserID:(unsigned)anId;
+(unsigned)userID;
+(void)setApptrackrUsername:(id)username;
+(id)apptrackrUsername;
+(void)setApptrackrPassword:(id)password;
+(id)apptrackrPassword;
@end

__attribute__((visibility("hidden")))
@interface DownloadsViewController : XXUnknownSuperclass <UIActionSheetDelegate, DownloadManagerDelegate, INDownloadQueueDelegate, UITableViewAlertViewDelegate, LSServiceBrowserDelegate> {
	NSMutableArray* titlesForTableView;
	NSIndexPath* selectedPath;
	NSMutableDictionary* checkmarksDictionary;
	NSMutableArray* _sendingConnectionsArray;
	unsigned _backgroundTaskIdentifier;
	DownloadManager* downloadManager;
	LSServiceBrowser* _localSharingBrowser;
	UITableViewAlertView* _alert;
	NSMutableDictionary* _titlesDictionary;
}
@property(copy, nonatomic) NSMutableDictionary* titlesDictionary;
@property(retain, nonatomic) UITableViewAlertView* alert;
@property(retain, nonatomic) LSServiceBrowser* localSharingBrowser;
@property(retain, nonatomic) DownloadManager* downloadManager;
@property(retain, nonatomic) NSMutableArray* sendingConnectionsArray;
@property(retain, nonatomic) NSMutableDictionary* checkmarksDictionary;
@property(retain, nonatomic) NSIndexPath* selectedPath;
@property(retain, nonatomic) NSMutableArray* titlesForTableView;
-(void)dealloc;
-(void)alertViewDidCancel:(id)alertView;
-(void)alertView:(id)view didSelectItemAtIndex:(unsigned)index;
-(void)serviceBrowserDidUpdateClients:(id)serviceBrowser;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)queueChangedNumberOfDownloads:(id)downloads;
-(void)selectDownloadTableViewControllerDidCancel:(id)selectDownloadTableViewController;
-(void)selectDownloadTableViewControllerDidStartDownload:(id)selectDownloadTableViewController;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)reloadTitlesForTableView;
-(void)reloadTableView;
-(void)doneButtonClickedInApplicationViewController;
-(void)loadView;
-(void)viewWillAppear:(BOOL)view;
-(void)downloadManagerValueChanged;
-(void)viewDidLoad;
-(void)editTableView;
-(void)installAllButtonClicked;
-(void)didEnterBackground:(id)background;
-(id)init;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)rebuildTabbarBadgeValue;
-(void)recheckActivity;
@end

__attribute__((visibility("hidden")))
@interface SelectDownloadTableViewController : XXUnknownSuperclass <DownloadWebViewControllerDelegate, UIActionSheetDelegate> {
	int applicationID;
	NSMutableArray* versionsArray;
	NSDictionary* linksDictionary;
	NSObject<SelectDownloadTableViewControllerDelegate>* delegate;
	UIImage* applicationImage;
	BOOL _pseudoEditingMode;
	NSIndexPath* _lastSelectedIndexPath;
}
@property(retain, nonatomic) NSIndexPath* lastSelectedIndexPath;
@property(retain, nonatomic) UIImage* applicationImage;
@property(retain, nonatomic) NSDictionary* linksDictionary;
@property(retain, nonatomic) NSMutableArray* versionsArray;
@property(assign, nonatomic) id delegate;
@property(assign) int applicationID;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)successfullyReportedLink;
-(void)failedToReportLink:(id)reportLink;
-(void)reportLinkThread:(id)thread;
-(void)downloadWebViewControllerStartedDownload:(id)download;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)reportButtonClicked;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)failedToRecieveDownloadLinks:(id)recieveDownloadLinks;
-(void)doneLoadingDownloadLinks;
-(void)loadDownloadLinks;
-(void)cancelButtonClicked;
-(id)initWithApplicationID:(int)applicationID;
@end

__attribute__((visibility("hidden")))
@interface DownloadWebViewController : XXUnknownSuperclass <UIWebViewDelegate, HackedWebPluginManagerDelegate> {
	UIWebView* webView;
	NSURLRequest* lastRequest;
	NSString* siteForDownloadString;
	NSObject<DownloadWebViewControllerDelegate>* delegate;
	UIImage* applicationImage;
	BOOL startedDownloadFromCheck;
	NSDictionary* _filehostsDictionary;
}
@property(retain, nonatomic) NSDictionary* filehostsDictionary;
@property(assign, nonatomic) BOOL startedDownloadFromCheck;
@property(retain, nonatomic) UIImage* applicationImage;
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSString* siteForDownloadString;
@property(retain, nonatomic) NSURLRequest* lastRequest;
@property(retain, nonatomic) UIWebView* webView;
-(void)dealloc;
-(void)viewDidUnload;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)pluginHacked;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidStartLoad:(id)webView;
-(void)webViewDidFinishLoad:(id)webView;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)init;
-(void)handleGesture:(id)gesture;
-(void)stopButtonClicked;
-(void)refreshButtonClicked;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface INDownloadQueueItem : XXUnknownSuperclass {
	NSString* _name;
	unsigned _ID;
	UIImage* _image;
}
@property(retain) UIImage* image;
@property(assign) unsigned ID;
@property(retain) NSString* name;
+(id)itemWithName:(id)name ID:(unsigned)anId andImage:(id)image;
-(void)dealloc;
-(id)initWithName:(id)name ID:(unsigned)anId andImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface INDownloadQueue : XXUnknownSuperclass {
	NSMutableDictionary* _queueDictionary;
	id<INDownloadQueueDelegate> _delegate;
}
@property(readonly, assign) unsigned queuedDownloads;
@property(assign) id<INDownloadQueueDelegate> delegate;
+(id)sharedDownloadQueue;
-(BOOL)isIDQueued:(unsigned)queued;
-(void)removeQueuedDownloadForID:(id)anId;
-(void)removeQueuedDownloadAtIndex:(unsigned)index;
-(id)itemAtIndex:(unsigned)index;
-(void)queueDownloadWithName:(id)name applicationID:(unsigned)anId andImage:(id)image;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface HackedWebPluginManager : XXUnknownSuperclass {
	NSObject<HackedWebPluginManagerDelegate>* delegate;
}
@property(assign, nonatomic) NSObject<HackedWebPluginManagerDelegate>* delegate;
+(id)sharedManager;
-(void)pluginHacked;
-(id)retain;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface IPAWebDownload : IPADownload {
	NSURLRequest* request;
	NSFileHandle* handle;
	BOOL isDownloadingWebpage;
	NSURLConnection* connection;
}
@property(assign) BOOL isDownloadingWebpage;
@property(retain, nonatomic) NSFileHandle* handle;
@property(retain, nonatomic) NSURLRequest* request;
-(void)dealloc;
-(void)cancel;
-(id)initWithRequest:(id)request andDelegate:(id)delegate andImage:(id)image;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
@end

__attribute__((visibility("hidden")))
@interface InstallationWrapper : XXUnknownSuperclass {
	NSString* fileName;
	NSString* fileSize;
	NSObject<InstallationWrapperDelegate>* delegate;
	BOOL deleteAutomatically;
}
@property(assign) id delegate;
@property(retain, nonatomic) NSString* fileSize;
@property(retain, nonatomic) NSString* fileName;
-(void)dealloc;
-(void)installDone;
-(void)log:(id)log;
-(void)install;
-(void)startInstall;
-(id)initWithFileName:(id)fileName andDelegate:(id)delegate startImmediat:(BOOL)immediat;
@end

__attribute__((visibility("hidden")))
@interface Settings : XXUnknownSuperclass {
	NSMutableDictionary* settings;
	NSString* titleLabelText;
	int installMethod;
	BOOL deleteAfterInstall;
	BOOL itunesSync;
	BOOL debugLog;
}
@property(assign, nonatomic) BOOL debugLog;
@property(assign, nonatomic) BOOL itunesSync;
@property(assign, nonatomic) BOOL deleteAfterInstall;
@property(assign, nonatomic) int installMethod;
@property(retain, nonatomic) NSString* titleLabelText;
@property(retain, nonatomic) NSMutableDictionary* settings;
-(void)dealloc;
-(void)refreshUiCache;
-(void)save;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DownloadManager : XXUnknownSuperclass <IPADownloadDelegate, InstallationWrapperDelegate> {
	NSMutableArray* downloadingArray;
	NSMutableArray* installingArray;
	NSMutableArray* downloadedArray;
	BOOL _backgroundMode;
	unsigned _backgroundIdentifier;
	NSObject<DownloadManagerDelegate>* delegate;
}
@property(assign, nonatomic) NSObject<DownloadManagerDelegate>* delegate;
@property(assign, nonatomic) unsigned backgroundIdentifier;
@property(readonly, assign) int numberOfDownloadedFiles;
@property(readonly, assign) int numberOfInstallations;
@property(readonly, assign) int numberOfDownloads;
@property(readonly, assign) BOOL isInBackgroundMode;
+(id)sharedDownloadManager;
-(void)dealloc;
-(BOOL)isInstallingFileNamed:(id)named;
-(void)deleteFileNamed:(id)named;
-(void)iPADownloadStartedDownloadingIPA:(id)ipa;
-(void)iPADownloadFailedToDownloadIPABecauseFileAlreadyExisted:(id)downloadIPABecauseFileAlreadyExisted;
-(void)iPADownloadFailedToDownloadIPA:(id)downloadIPA;
-(void)iPADownload:(id)download failedToDownloadWithError:(id)error;
-(void)iPADownloadFinishedDownload:(id)download;
-(void)installationWrapper:(id)wrapper failedToInstallWithError:(id)error;
-(void)installationWrapperIsDoneInstallingIPA:(id)ipa;
-(void)installAll;
-(void)willEnterForeground:(id)foreground;
-(void)endBackgroundTask;
-(void)displayLocalNotificationWithText:(id)text;
-(void)didEnterBackground:(id)background;
-(void)cancelAllDownloads;
-(void)runInForgroundMode;
-(void)runInBackgroundMode;
-(void)cancelDownloadAtIndex:(int)index;
-(void)deleteExistingFileAtIndex:(int)index;
-(void)installExistingFileAtIndex:(int)index;
-(void)intallFileWithName:(id)name;
-(void)addTorrentFile:(id)file magnetName:(id)name magnetLink:(id)link andImage:(id)image showStarted:(BOOL)started;
-(void)addTorrentWithMagnetURI:(id)magnetURI andImage:(id)image showStarted:(BOOL)started;
-(void)addDownloadWithRequest:(id)request andImage:(id)image showStarted:(BOOL)started;
-(void)addDownloadWithRequest:(id)request andImage:(id)image;
-(void)rebuildLocalFiles;
-(id)init;
-(void)_fileDidUplaod:(id)_file;
-(void)_didReceiveFileNamed:(id)named;
-(id)existingFileAtIndex:(int)index;
-(id)installationAtIndex:(int)index;
-(id)downloadAtIndex:(int)index;
@end

__attribute__((visibility("hidden")))
@interface INExistingFile : XXUnknownSuperclass {
	NSString* _filePath;
	long long _size;
}
@property(readonly, assign, nonatomic) long long size;
@property(copy, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSString* fileName;
+(id)existingFileForFileAtPath:(id)path;
-(void)dealloc;
-(int)caseInsensitiveCompare:(id)compare;
-(id)initWithFilePath:(id)filePath;
@end

__attribute__((visibility("hidden")))
@interface INIconsCache : XXUnknownSuperclass {
}
+(id)filePathForCachedIconForName:(id)name;
+(void)removeIconFromIconsCacheNamed:(id)iconsCacheNamed;
+(void)cleareIconCache;
+(id)cachedImageFromFileName:(id)fileName;
+(void)cacheIcon:(id)icon forFileName:(id)fileName;
@end

__attribute__((visibility("hidden")))
@interface FileSystemHelper : XXUnknownSuperclass {
}
+(BOOL)shouldDisplayInstallAll;
+(void)cleanIconsCacheDirectory;
+(BOOL)deleteAutomarically;
+(id)bundlePathForExistingBundleIdentifier:(id)existingBundleIdentifier;
+(id)pathForExistingBundleIdentifier:(id)existingBundleIdentifier;
+(id)infoPlistForIPANamed:(id)ipanamed;
+(id)bundleIdentifierForIPANamed:(id)ipanamed;
+(id)tmpDirectory;
+(id)iconsCache;
+(void)removeCategoriesCache;
+(id)documentsDirectory;
+(id)downloadsDirectory;
+(id)categoryCachesDirectoy;
+(id)cachesDirectory;
@end

__attribute__((visibility("hidden")))
@interface INDeviceLogManager : XXUnknownSuperclass {
	NSMutableString* _completeLog;
}
+(id)sharedManager;
-(void)log:(id)log;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INLogItem : XXUnknownSuperclass {
	NSString* _function;
	NSString* _logText;
}
@property(retain, nonatomic) NSString* logText;
@property(retain, nonatomic) NSString* function;
+(id)logWithFunction:(id)function andText:(id)text;
-(void)dealloc;
-(id)initWithFunction:(id)function andText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface ScreenshotScrollView : XXUnknownSuperclass <ScreenshotScrollViewImagesContainerDelegate> {
	NSObject<ScreenshotScrollViewDelegate>* delegate;
	ScreenshotScrollViewImagesContainer* scrollContainer;
	UIPageControl* pageControl;
	BOOL _canZoomScreenshots;
	UIButton* overlayButton;
	ScreenshotScrollViewZoomedView* lastZoomView;
	float _heightForScreenshot;
	float _widthForScreenshot;
}
@property(retain, nonatomic) ScreenshotScrollViewZoomedView* lastZoomView;
@property(retain, nonatomic) UIButton* overlayButton;
@property(assign, nonatomic) BOOL canZoomScreenshots;
@property(retain, nonatomic) UIPageControl* pageControl;
@property(retain, nonatomic) ScreenshotScrollViewImagesContainer* scrollContainer;
@property(assign, nonatomic) NSObject<ScreenshotScrollViewDelegate>* delegate;
-(void)dealloc;
-(void)overlayButtonClicked;
-(void)container:(id)container recievedZoomRequestForScreenshot:(id)screenshot;
-(void)container:(id)container movedToScreenshotAtIndex:(int)index;
-(void)containerMovedScreenshots:(id)screenshots;
-(void)pageControlValueChanged:(id)changed;
-(void)addScreenshotFromURL:(id)url isHorizontal:(BOOL)horizontal;
-(id)initWithFrame:(CGRect)frame widthForScreenshot:(float)screenshot andHeightForScreenshot:(float)screenshot3;
@end

__attribute__((visibility("hidden")))
@interface ScreenshotScrollViewImage : XXUnknownSuperclass <IconDownloadManagerItem> {
	NSURL* imageURL;
	NSObject<ScreenshotScrollViewImageDelegate>* delegate;
	BOOL _horizontal;
	UIActivityIndicatorView* _activityIndicatorView;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(readonly, assign, nonatomic) BOOL horizontal;
@property(assign) NSObject<ScreenshotScrollViewImageDelegate>* delegate;
@property(retain, nonatomic) NSURL* imageURL;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame andImageURL:(id)url isHorizontal:(BOOL)horizontal;
-(void)setImage:(id)image;
-(void)download;
@end

__attribute__((visibility("hidden")))
@interface ScreenshotScrollViewImagesContainer : XXUnknownSuperclass <UIScrollViewDelegate, ScreenshotScrollViewImageDelegate> {
	NSObject<ScreenshotScrollViewImagesContainerDelegate>* containerDelegate;
	NSMutableArray* _screenshotsArray;
	NSMutableArray* _centerPointsForScreenshots;
	UIImage* _borderImage;
	float _spaceBeforeScreenshots;
	float _spaceBetweenScreenshots;
	float _offsetForScreenshots;
	float _widthForNextScreenshot;
}
@property(assign, nonatomic) NSObject<ScreenshotScrollViewImagesContainerDelegate>* containerDelegate;
-(void)dealloc;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollToScreenshot:(int)screenshot;
-(int)nextVisibleScreenshot;
-(void)screenshotScrollViewImageTouchedDown:(id)down;
-(void)insertScreenshot:(id)screenshot;
-(id)initWithFrame:(CGRect)frame spaceBeforeScreenshot:(float)screenshot spaceBetweenScreenshots:(float)screenshots andOffsetForScreenshots:(float)screenshots4;
@end

__attribute__((visibility("hidden")))
@interface ScreenshotScrollViewZoomedView : XXUnknownSuperclass {
	UIImageView* imageView;
	UIImageView* backgroundImageView;
	BOOL _horizontal;
	NSURL* _imageURL;
}
@property(retain, nonatomic) NSURL* imageURL;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) BOOL horizontal;
-(void)dealloc;
-(void)doneHinding;
-(void)hide;
-(void)show;
-(id)initWithFrame:(CGRect)frame ImageURL:(id)url isHorizontal:(BOOL)horizontal;
@end

__attribute__((visibility("hidden")))
@interface IconDownloadManager : XXUnknownSuperclass {
	NSObject<IconDownloadManagerDelegate>* delegate;
	NSMutableArray* downloads;
	NSLock* lock;
}
@property(assign, nonatomic) NSObject<IconDownloadManagerDelegate>* delegate;
+(id)sharedIconDownloadManager;
-(void)dealloc;
-(void)downloadIconsInThread;
-(void)detachNewIconDownload:(id)download;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface IconDownload : XXUnknownSuperclass <IconDownloadManagerItem> {
	NSIndexPath* _indexPathInTableView;
	id<IconDownloadDelegate> _delegate;
	UIImage* _icon;
	NSURL* _url;
	NSObject<IconDownloadDelegate>* delegate;
}
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) UIImage* icon;
@property(assign, nonatomic) NSObject<IconDownloadDelegate>* delegate;
@property(retain, nonatomic) NSIndexPath* indexPathInTableView;
-(void)dealloc;
-(void)download;
@end

__attribute__((visibility("hidden")))
@interface INIPADownloadTableViewCell : INLocalApplicationTableViewCell <IPADownloadProgressDelegate> {
	INProgressView* _progressView;
	UILabel* _secondDetailsLabel;
	IPADownload* _download;
	double _lastProgress;
	double _lastSpeed;
	double _lastSeconds;
	double _lastBytesCompleted;
}
@property(retain, nonatomic) UILabel* secondDetailsLabel;
@property(retain, nonatomic) INProgressView* progressView;
@property(assign, nonatomic) IPADownload* download;
-(void)iPADownloadEndedTransfer:(id)transfer;
-(void)iPADownload:(id)download updatedProgress:(double)progress withSpeedInBytes:(double)bytes secondsRemaining:(float)remaining;
-(void)_upadateViews;
-(void)dealloc;
-(void)prepareForReuse;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INIPAInstallationTableViewCell : INLocalApplicationTableViewCell {
	UIActivityIndicatorView* _activityIndicator;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INNextPageTableViewCell : INTableViewCell {
	UILabel* _mainLabel;
	UILabel* _detailsLabel;
	UIActivityIndicatorView* _activityIndicator;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* detailsLabel;
@property(retain, nonatomic) UILabel* mainLabel;
-(void)dealloc;
-(void)stopSpinning;
-(void)startSpinning;
-(void)_stopSpinningCallback:(id)callback;
-(void)_startSpinningCallback:(id)callback;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INCloudApplicationTableViewCell : INTableViewCell {
	UILabel* _detailsLabel;
	UILabel* _headerLabel;
	UILabel* _mainLabel;
	UIImageView* _badgeImageView;
}
@property(retain, nonatomic) UIImageView* badgeImageView;
@property(retain, nonatomic) UILabel* mainLabel;
@property(retain, nonatomic) UILabel* headerLabel;
@property(retain, nonatomic) UILabel* detailsLabel;
-(void)dealloc;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INLocalApplicationTableViewCell : INTableViewCell {
	UILabel* _mainLabel;
	UILabel* _detailsLabel;
}
@property(retain, nonatomic) UILabel* detailsLabel;
@property(retain, nonatomic) UILabel* mainLabel;
-(void)dealloc;
-(void)prepareForReuse;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INReloadCategoryTableViewCell : INTableViewCell {
	UILabel* _progressLabel;
	UIActivityIndicatorView* _activityIndicator;
	UIProgressView* _progressView;
}
@property(retain, nonatomic) UIProgressView* progressView;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* progressLabel;
-(void)dealloc;
-(void)progressNotificationCallback:(id)callback;
-(void)displayProgress:(id)progress;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INCategoryTableViewCell : INTableViewCell {
	UILabel* _categoryNameLabel;
}
@property(retain, nonatomic) UILabel* categoryNameLabel;
-(void)dealloc;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INTableViewCell : XXUnknownSuperclass {
	UIImageView* _backgroundImageView;
	UIImageView* _applicationImageView;
	UIImageView* _maskImageView;
	UIImageView* _shadowImageView;
	unsigned _stateMask;
}
@property(retain, nonatomic) UIImageView* shadowImageView;
@property(retain, nonatomic) UIImageView* maskImageView;
@property(retain, nonatomic) UIImageView* applicationImageView;
@property(retain, nonatomic) UIImageView* backgroundImageView;
+(float)height;
-(void)dealloc;
-(void)prepareForReuse;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)didTransitionToState:(unsigned)state;
-(void)willTransitionToState:(unsigned)state;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INHomePageViewController : XXUnknownSuperclass <UIWebViewDelegate, INHomePageCacheDelegate> {
	UIWebView* _webView;
	INAdView* _adView;
}
@property(retain) UIWebView* webView;
-(void)homePageCacheDidEndCaching:(id)homePageCache;
-(void)homePageCacheDidStartCaching:(id)homePageCache;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)applicationWillEnterForegroundCallback:(id)application;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INHomePageWebViewController : XXUnknownSuperclass <UIWebViewDelegate, UIActionSheetDelegate> {
	UIWebView* _webView;
	NSURLRequest* _request;
	BOOL _isFile;
}
@property(retain, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) UIWebView* webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionButtonClicked:(id)clicked;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface INHomePageCache : XXUnknownSuperclass {
	NSMutableDictionary* _cachedItemsCache;
	id<INHomePageCacheDelegate> _delegate;
}
@property(readonly, assign) BOOL isHomePageAvailable;
@property(assign) id<INHomePageCacheDelegate> delegate;
@property(readonly, assign) NSString* homePageFilePath;
@property(readonly, assign) NSString* cacheDirectory;
@property(retain) NSMutableDictionary* cachedItemsCache;
+(id)sharedCache;
-(void)synchronize;
-(void)rebuildCache;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ApplicationViewController_Pad : XXUnknownSuperclass <SelectDownloadTableViewControllerDelegate, UIScrollViewDelegate, INSearchViewControllerDelegate, IconDownloadManagerDelegate, INUpdatesViewControllerDelegate> {
	UIScrollView* scrollContainer;
	UIButton* priceButton;
	UIButton* downloadButton;
	UILabel* versionLabel;
	ScreenshotScrollView* screenshotScrollView;
	UIImage* applicationImage;
	UIActivityIndicatorView* loadingIndicatorView;
	UILabel* loadingLabel;
	BOOL downloadButtonIsClicked;
	BOOL _displayingDownloadsView;
	int _applicationID;
	NSNumber* applicationNumber;
	APIApplicationIntern* _application;
	UIPopoverController* currentPopOver;
	UIPopoverController* _downloadsPopOver;
	DownloadsView* _downloadsView;
	BOOL _openFromURL;
}
@property(retain, nonatomic) id currentPopOver;
@property(retain, nonatomic) APIApplicationIntern* application;
@property(retain, nonatomic) NSNumber* applicationNumber;
@property(assign) int applicationID;
@property(assign, getter=isDisplayingDownloadsView) BOOL displayingDownloadsView;
@property(assign) BOOL downloadButtonIsClicked;
@property(retain, nonatomic) id downloadsPopOver;
@property(retain, nonatomic) UILabel* loadingLabel;
@property(retain, nonatomic) UIActivityIndicatorView* loadingIndicatorView;
@property(retain, nonatomic) UIImage* applicationImage;
@property(retain, nonatomic) ScreenshotScrollView* screenshotScrollView;
@property(retain, nonatomic) UILabel* versionLabel;
@property(retain, nonatomic) UIButton* downloadButton;
@property(retain, nonatomic) UIButton* priceButton;
@property(retain, nonatomic) UIScrollView* scrollContainer;
@property(retain, nonatomic) DownloadsView* downloadsView;
-(void)loadApplicationIDFromURLHandler:(unsigned)urlhandler;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)receivedApplicationData;
-(void)failedToLoadScreenshots:(id)loadScreenshots;
-(void)loadScreenshots;
-(void)failedToLoadApplicationData:(id)loadApplicationData;
-(void)loadApplicationData:(id)data;
-(void)loadMostPopularApplication;
-(void)_applicationIconDidLoadForImageView:(id)_applicationIcon;
-(void)applicationIconDidLoad:(id)applicationIcon forImageView:(id)imageView;
-(void)loadIconForImageView:(id)imageView;
-(void)displayApplicationInScrollContainer;
-(void)selectDownloadTableViewControllerDidStartDownload:(id)selectDownloadTableViewController;
-(void)selectDownloadTableViewControllerDidCancel:(id)selectDownloadTableViewController;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)updatesViewController:(id)controller didSelectApplication:(id)application;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(void)searchViewController:(id)controller didSelectApplication:(id)application;
-(void)iconDownloadManagerFinishedAllDownloads:(id)downloads;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)loadView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)downloadLaterButtonClicked:(id)clicked;
-(void)downloadButtonClicked:(id)clicked;
-(void)settingsButtonClicked:(id)clicked;
-(void)updatesButtonClicked:(id)clicked;
-(void)downloadsButtonClicked:(id)clicked;
-(void)searchButtonClicked:(id)clicked;
-(void)queuedDownloadSelected:(id)selected;
-(void)downloadsViewDidStopSelector;
-(id)init;
-(id)initWithApplicationID:(int)applicationID;
@end

__attribute__((visibility("hidden")))
@interface DownloadsView : XXUnknownSuperclass <DownloadManagerDelegate, DVExistingFileViewDelegate, DVExistingFileDetailedViewControllerDelegate> {
	UIImageView* _backgroundImageView;
	UIScrollView* _contentScrollView;
	NSMutableArray* _existingFilesArray;
	NSMutableArray* _downloadingFilesArray;
	float _contentViewTotalWidth;
	NSMutableDictionary* _viewsForReuse;
	id _lastPopoverController;
}
@property(retain, nonatomic) NSMutableDictionary* viewsForReuse;
@property(retain, nonatomic) NSMutableArray* downloadingFilesArray;
@property(retain, nonatomic) NSMutableArray* existingFilesArray;
@property(retain, nonatomic) UIScrollView* contentScrollView;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void)dealloc;
-(id)viewForReuseIdentifier:(id)reuseIdentifier;
-(void)storeView:(id)view forReuseIdentifier:(id)reuseIdentifier;
-(void)existingFileDetailedViewControllerDeleteButtonClicked:(id)clicked;
-(void)existingFileDetailedViewControllerInstallButtonClicked:(id)clicked;
-(void)existingFileDetailedViewControllerSendButtonClicked:(id)clicked;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
-(void)userTapedView:(id)view;
-(void)downloadManagerValueChanged;
-(void)rebuildContentView;
-(void)rebuildDownloadingFiles;
-(void)rebuildExistingFiles;
-(void)clearContentView;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface DVExistingFileView : XXUnknownSuperclass {
	UIImageView* _imageView;
	UIImageView* _maskImageView;
	UIImageView* _shaddowImageView;
	UIActivityIndicatorView* _activityIndicator;
	NSString* _fileName;
	UITapGestureRecognizer* _gestureRecognizer;
	id<DVExistingFileViewDelegate> _delegate;
}
@property(assign, nonatomic) id<DVExistingFileViewDelegate> delegate;
@property(retain, nonatomic) UITapGestureRecognizer* gestureRecognizer;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UIImageView* shaddowImageView;
@property(retain, nonatomic) UIImageView* maskImageView;
@property(retain, nonatomic) UIImageView* imageView;
-(void)dealloc;
-(void)removeInstallingMark;
-(void)markInstalling;
-(void)taped;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface DVDownloadingFileView : DVExistingFileView <IPADownloadProgressDelegate> {
	UIProgressView* _progressView;
	IPAWebDownload* _download;
}
@property(assign, nonatomic) IPAWebDownload* download;
@property(retain, nonatomic) UIProgressView* progressView;
-(void)iPADownloadEndedTransfer:(id)transfer;
-(void)iPADownload:(id)download updatedProgress:(double)progress withSpeedInBytes:(double)bytes secondsRemaining:(float)remaining;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface DVExistingFileDetailedViewController : XXUnknownSuperclass {
	UIImageView* _imageView;
	UIImageView* _maskImageView;
	UIImageView* _shaddowImageView;
	UILabel* _nameLabel;
	UILabel* _sizeLabel;
	UIButton* _installButton;
	UIButton* _sendButton;
	UIButton* _deleteButton;
	NSString* _fileName;
	id<DVExistingFileDetailedViewControllerDelegate> _delegate;
}
@property(assign, nonatomic) id<DVExistingFileDetailedViewControllerDelegate> delegate;
@property(retain, nonatomic) UIButton* deleteButton;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) UIButton* installButton;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) UILabel* sizeLabel;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) UIImageView* shaddowImageView;
@property(retain, nonatomic) UIImageView* maskImageView;
@property(retain, nonatomic) UIImageView* imageView;
-(void)dealloc;
-(void)deleteButtonClicked;
-(void)sendButtonClicked;
-(void)installButtonClicked;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithFileName:(id)fileName;
@end

__attribute__((visibility("hidden")))
@interface DVDownloadingDetailedViewController : XXUnknownSuperclass {
	UIImageView* _imageView;
	UIImageView* _maskImageView;
	UIImageView* _shaddowImageView;
	UILabel* _nameLabel;
	UILabel* _progressLabel;
	UILabel* _speedLabel;
	UIButton* _cancelButton;
	BOOL _canCancelDownload;
}
@property(assign, nonatomic) BOOL canCancelDownload;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UILabel* speedLabel;
@property(retain, nonatomic) UILabel* progressLabel;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) UIImageView* shaddowImageView;
@property(retain, nonatomic) UIImageView* maskImageView;
@property(retain, nonatomic) UIImageView* imageView;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface INCategoryViewController : XXUnknownSuperclass <SettingsViewControllerDelegate> {
	BOOL _isUpdatingCategories;
	NSArray* _categories;
	unsigned _selectedRow;
}
@property(retain, nonatomic) NSArray* categories;
@property(readonly, assign, nonatomic) BOOL areCategoriesLoaded;
@property(readonly, assign, nonatomic) BOOL areCategoriesUpToDate;
-(void)settingsViewControllerClearedCategoryCache:(id)cache;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)loadCachedCategories;
-(void)cacheCategories;
-(void)updateProgressWithTitle:(id)title overallProgress:(float)progress;
-(void)didFailToLoadCategories:(id)loadCategories;
-(void)didLoadCategories:(id)categories;
-(void)downloadCategoriesThread;
-(void)downloadCategories;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INContentOfCategoryViewController : INAPICategoryViewController {
	UIToolbar* _toolbar;
	UISegmentedControl* _segmentControl;
}
-(int)sortOptionForSelectedSegmentIndex:(unsigned)selectedSegmentIndex;
-(void)segmentControlDidChangeValue:(id)segmentControl;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)setLoading:(BOOL)loading animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface INApplicationViewController : XXUnknownSuperclass <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, DownloadWebViewControllerDelegate, ScreenshotScrollViewDelegate, UIScrollViewDelegate, APIApplicationDelegate, MFMailComposeViewControllerDelegate> {
	APIApplication* _application;
	BOOL _onlyShowUpdates;
	dispatch_queue_s* _downloadQueue;
	UIImageView* _backgroundImageView;
	UILabel* _loadingLabel;
	UIActivityIndicatorView* _loadingActivityIndicator;
	BOOL _loading;
	UIScrollView* _contentScrollView;
	UIView* _contentScrollViewTopContainerView;
	UIView* _contentScrollViewBottomContainerView;
	UIImageView* _contentScrollViewBottomContainerViewBackgroundView;
	UIImageView* _applicationImageView;
	UIImageView* _applicationShadowImageView;
	UIButton* _downloadButton;
	ScreenshotScrollView* _screenshotScrollView;
	UIButton* _queueButton;
	UIView* _contentScrollViewDownloadsContainerView;
	UIImageView* _downloadBackgroundView;
	UITableView* _downloadLinksTableView;
	NSDictionary* _downloadLinksVersionDictionary;
	NSArray* _downloadLinksVersionsArray;
	BOOL _isDownloadLinksTableViewInPseudoEditingMode;
	NSIndexPath* _downloadLinkSelectedIndexPath;
	BOOL _shouldHideDownloadLinksAfterViewDidAppear;
	BOOL _isShowingDownloadLinks;
}
@property(retain, nonatomic) NSIndexPath* downloadLinkSelectedIndexPath;
@property(retain, nonatomic) NSArray* downloadLinksVersionsArray;
@property(retain, nonatomic) NSDictionary* downloadLinksVersionDictionary;
@property(retain, nonatomic) UITableView* downloadLinksTableView;
@property(retain, nonatomic) UIImageView* downloadBackgroundView;
@property(retain, nonatomic) UIView* contentScrollViewDownloadsContainerView;
@property(retain, nonatomic) UIButton* queueButton;
@property(retain, nonatomic) ScreenshotScrollView* screenshotScrollView;
@property(retain, nonatomic) UIButton* downloadButton;
@property(retain, nonatomic) UIImageView* applicationShadowImageView;
@property(retain, nonatomic) UIImageView* applicationImageView;
@property(retain, nonatomic) UIImageView* contentScrollViewBottomContainerViewBackgroundView;
@property(retain, nonatomic) UIView* contentScrollViewBottomContainerView;
@property(retain, nonatomic) UIView* contentScrollViewTopContainerView;
@property(retain, nonatomic) UIScrollView* contentScrollView;
@property(assign, nonatomic) BOOL loading;
@property(retain, nonatomic) UIActivityIndicatorView* loadingActivityIndicator;
@property(retain, nonatomic) UILabel* loadingLabel;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(readonly, assign, nonatomic) UIBarButtonItem* shareButton;
@property(readonly, assign, nonatomic) dispatch_queue_s* downloadQueue;
@property(assign, nonatomic) BOOL onlyShowUpdates;
@property(retain, nonatomic) APIApplication* application;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)screenshotScrollViewDidMoveScreenshots:(id)screenshotScrollView;
-(void)downloadWebViewControllerStartedDownload:(id)download;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)actionButtonClicked:(id)clicked;
-(void)queueButtonClicked:(id)clicked;
-(void)reportButtonClicked:(id)clicked;
-(void)overlayViewTapGestureRecognized:(id)recognized;
-(void)downloadButtonClicked:(id)clicked;
-(void)hideDownloadViewAnimated:(BOOL)animated;
-(void)showDownloadViewAnimated:(BOOL)animated;
-(void)loadDownloadsContainerView;
-(void)loadContentScrollView;
-(void)loadButtomContainerView;
-(void)loadTopContainerView;
-(void)rebuildContentScrollView;
-(void)applicationImageDidLoad:(id)applicationImage;
-(void)failedToLoadApplication:(id)loadApplication;
-(void)applicationDidLoad:(id)application;
-(void)downloadApplicationData;
-(void)downloadApplicationImage;
-(void)downloadScreenshots;
-(void)downloadDownloadLinks;
-(void)application:(id)application didFailToDownloadScreenshotsWithError:(id)error;
-(void)applicationDidDownloadScreenshots:(id)application;
-(void)application:(id)application didFailToDownloadLinksWithError:(id)error;
-(void)applicationDidDownloadLinks:(id)application;
-(void)application:(id)application didFailToDownloadDataWithError:(id)error;
-(void)applicationDidDownloadData:(id)application;
-(void)applicationDidLoadImage:(id)application;
-(void)hideLoadingAnimated:(BOOL)animated;
-(void)showLoadingAnimated:(BOOL)animated;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)morphQueueButtonOut;
@end

__attribute__((visibility("hidden")))
@interface INSearchViewController : INAPICategoryViewController <UISearchDisplayDelegate, UISearchBarDelegate, UIWebViewDelegate> {
	UISearchBar* _searchBar;
	UISearchDisplayController* _mySearchDisplayController;
	BOOL _pushViewControllerIfUserSelectsApplication;
	id<INSearchViewControllerDelegate> _delegate;
	INAdView* _adView;
}
@property(assign, nonatomic) id<INSearchViewControllerDelegate> delegate;
@property(assign, nonatomic) BOOL pushViewControllerIfUserSelectsApplication;
@property(retain, nonatomic) UISearchBar* searchBar;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INAPICategoryViewController : XXUnknownSuperclass <UITableViewDelegate, UITableViewDataSource, APICategoryDelegate, APIApplicationDelegate> {
	UITableView* _tableView;
	APICategory* _category;
	NSMutableDictionary* _pendingIconDownloadsDictionary;
	NSIndexPath* _selectedIndexPath;
	BOOL _autoLoadFirstPage;
}
@property(readonly, assign, nonatomic) UIEdgeInsets tableViewContentInset;
@property(readonly, assign, nonatomic) BOOL shouldDisplayTableViewFooterView;
@property(readonly, assign, nonatomic) BOOL shouldDisplayTableViewHeaderView;
@property(readonly, assign, nonatomic) UIView* tableViewFooterView;
@property(readonly, assign, nonatomic) UIView* tableViewHeaderView;
@property(retain, nonatomic) NSIndexPath* selectedIndexPath;
@property(retain, nonatomic) NSMutableDictionary* pendingIconDownloadsDictionary;
@property(readonly, assign, nonatomic) APICategory* category;
@property(retain, nonatomic) UITableView* tableView;
-(void)categoryDidResetApplications:(id)category;
-(void)category:(id)category didFailToLoadNextPageWithError:(id)error;
-(void)categoryDidLoadNextPage:(id)category;
-(void)categoryWillStartLoading:(id)category;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)startImageDownloadForApplicationAtIndexPath:(id)indexPath;
-(void)applicationDidLoadImage:(id)application;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateTableViewHeaderAndFooterViews;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithCategory:(id)category;
-(void)setLoading:(BOOL)loading animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface APIRequest : XXUnknownSuperclass {
}
@property(readonly, assign, nonatomic) NSString* requestString;
@end

__attribute__((visibility("hidden")))
@interface APIResponse : XXUnknownSuperclass {
	int responseCode;
}
@property(assign) int responseCode;
@end

__attribute__((visibility("hidden")))
@interface APIApplication : XXUnknownSuperclass {
	unsigned _applicationID;
	unsigned _dateAdded;
	unsigned _categoryID;
	unsigned _deviceID;
	NSString* _iconURL;
	unsigned _lastModified;
	NSString* _latestVersion;
	NSString* _name;
	NSString* _seller;
	BOOL _universal;
	UIImage* _image;
	BOOL _isLoadingImage;
	BOOL _didDownloadImage;
	id<APIApplicationDelegate> _delegate;
	NSString* _iTunesURL;
	NSString* _category;
	NSString* _size;
	NSString* _copyright;
	NSString* _price;
	NSString* _rating;
	NSString* _description;
	NSString* _whatsNew;
	NSString* _releaseDate;
	NSString* _requirements;
	BOOL _isDownloadingData;
	BOOL _didDownloadData;
	NSDictionary* _downloadLinksVersionDictionary;
	NSArray* _downloadLinksVersionsArray;
	BOOL _isDownloadingLinks;
	BOOL _didDownloadLinks;
	NSArray* _screenshotLinks;
	BOOL _isDownloadingScreenshots;
	BOOL _didDownloadScreenshots;
}
@property(retain, nonatomic) NSArray* screenshotLinks;
@property(retain, nonatomic) NSArray* downloadLinksVersionsArray;
@property(retain, nonatomic) NSDictionary* downloadLinksVersionDictionary;
@property(copy, nonatomic) NSString* requirements;
@property(copy, nonatomic) NSString* releaseDate;
@property(copy, nonatomic) NSString* whatsNew;
@property(copy, nonatomic) NSString* description;
@property(copy, nonatomic) NSString* rating;
@property(copy, nonatomic) NSString* price;
@property(copy, nonatomic) NSString* copyright;
@property(copy, nonatomic) NSString* size;
@property(copy, nonatomic) NSString* category;
@property(copy, nonatomic) NSString* iTunesURL;
@property(assign, nonatomic) id<APIApplicationDelegate> delegate;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic, getter=isUniversal) BOOL universal;
@property(retain, nonatomic) NSString* seller;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* latestVersion;
@property(assign, nonatomic) unsigned lastModified;
@property(copy, nonatomic) NSString* iconURL;
@property(assign, nonatomic) unsigned deviceID;
@property(assign, nonatomic) unsigned categoryID;
@property(assign, nonatomic) unsigned dateAdded;
@property(assign, nonatomic) unsigned applicationID;
@property(readonly, assign, nonatomic) BOOL areScreenshotsLoaded;
@property(readonly, assign, nonatomic) BOOL areDownloadLinksLoaded;
@property(readonly, assign, nonatomic) BOOL isImageLoaded;
@property(readonly, assign, nonatomic) BOOL isDataLoaded;
+(id)applicationForID:(unsigned)anId;
-(void)didFailToDownloadScreenshots:(id)downloadScreenshots;
-(void)didDownloadScreenshots;
-(void)downloadScreenshotsThread;
-(void)downloadScreenshots;
-(void)didFailToDownloadLinks:(id)downloadLinks;
-(void)didDownloadLinks;
-(void)downloadLinksThread;
-(void)downloadLinks;
-(void)didFailToDownloadData:(id)downloadData;
-(void)didDownloadData;
-(void)downloadDataThread;
-(void)downloadData;
-(void)didLoadImage;
-(void)downloadImageThread;
-(void)downloadImage;
-(void)dealloc;
-(id)initWithInternalApplication:(id)internalApplication;
@end

__attribute__((visibility("hidden")))
@interface ApptrackrAPI : XXUnknownSuperclass {
}
+(id)urlEncodeValue:(id)value;
+(id)sendRequest:(id)request;
+(id)reportSubmit:(id)submit;
+(id)checkAuth:(id)auth;
+(id)getLinksWithRequest:(id)request;
+(id)getApplicationListWithRequest:(id)request;
+(id)getApplicationWithRequest:(id)request;
+(id)getScreenshotsWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface APICategory : XXUnknownSuperclass <NSCoding> {
	unsigned _numberOfApps;
	NSString* _iconURL;
	unsigned _categoryID;
	NSString* _name;
	UIImage* _image;
	id<APICategoryDelegate> _delegate;
	int _appsPerPage;
	int _sortOption;
	unsigned _currentPage;
	unsigned _numberOfPages;
	BOOL _getPageCountOnNextRequest;
	int _deviceID;
	NSString* _searchString;
	NSMutableArray* _applications;
	BOOL _isDownloading;
}
@property(readonly, assign, nonatomic) NSArray* applications;
@property(retain, nonatomic) NSString* searchString;
@property(assign, nonatomic) int deviceID;
@property(readonly, assign, nonatomic) unsigned numberOfPages;
@property(readonly, assign, nonatomic) unsigned currentPage;
@property(assign, nonatomic) int sortOption;
@property(assign, nonatomic) int appsPerPage;
@property(assign, nonatomic) id<APICategoryDelegate> delegate;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* iconURL;
@property(assign, nonatomic) unsigned categoryID;
@property(assign, nonatomic) unsigned numberOfApps;
@property(readonly, assign, nonatomic) BOOL canDownloadNextPage;
+(id)allCategories:(id*)categories;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(int)caseInsensitiveCompare:(id)compare;
-(void)didFailToDownloadNextPage:(id)downloadNextPage;
-(void)didDownloadNextPage:(id)page;
-(void)downloadNextPageThread;
-(void)downloadNextPage;
-(void)resetData;
-(id)init;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationIntern : XXUnknownSuperclass {
	unsigned applicationID;
	NSString* iTunesURL;
	NSString* name;
	NSString* seller;
	NSString* category;
	NSString* size;
	NSString* latestVersion;
	NSString* copyright;
	NSString* price;
	NSString* rating;
	NSString* icon75;
	NSString* description;
	NSString* whatsNew;
	NSString* releaseDate;
	NSString* requirements;
	BOOL _universal;
}
@property(assign, nonatomic, getter=isUniversal) BOOL universal;
@property(retain, nonatomic) NSString* requirements;
@property(retain, nonatomic) NSString* releaseDate;
@property(retain, nonatomic) NSString* whatsNew;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* icon75;
@property(retain, nonatomic) NSString* rating;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* copyright;
@property(retain, nonatomic) NSString* latestVersion;
@property(retain, nonatomic) NSString* size;
@property(retain, nonatomic) NSString* category;
@property(retain, nonatomic) NSString* seller;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* iTunesURL;
@property(assign) unsigned applicationID;
+(id)applicationWithID:(unsigned)anId error:(id*)error;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationListItem : XXUnknownSuperclass {
	unsigned applicationID;
	unsigned dateAdded;
	unsigned category;
	unsigned deviceID;
	NSString* _iconURL;
	unsigned lastModified;
	NSString* latestVersion;
	NSString* name;
	NSString* seller;
	BOOL _universal;
}
@property(assign, nonatomic, getter=isUniversal) BOOL universal;
@property(retain, nonatomic) NSString* seller;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* latestVersion;
@property(assign) unsigned lastModified;
@property(retain, nonatomic) NSString* iconURL;
@property(assign) unsigned deviceID;
@property(assign) unsigned category;
@property(assign) unsigned dateAdded;
@property(assign) unsigned applicationID;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationListRequest : APIRequest {
	int appsPerPage;
	int sortOption;
	unsigned page;
	unsigned categoryID;
	BOOL showPageCount;
	int deviceid;
	NSString* searchString;
}
@property(retain, nonatomic) NSString* searchString;
@property(assign) int deviceid;
@property(assign) BOOL showPageCount;
@property(assign) unsigned categoryID;
@property(assign) unsigned page;
@property(assign) int sortOption;
@property(assign) int appsPerPage;
-(void)dealloc;
-(id)requestString;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationListResponse : APIResponse {
	NSMutableArray* applicationList;
	unsigned numberOfPages;
}
@property(assign) unsigned numberOfPages;
@property(retain, nonatomic) NSMutableArray* applicationList;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationRequest : APIRequest {
	unsigned applicationID;
	BOOL showITunesURL;
	BOOL showName;
	BOOL showSeller;
	BOOL showCategory;
	BOOL showSize;
	BOOL showLatestVersion;
	BOOL showCopyright;
	BOOL showPrice;
	BOOL showRating;
	BOOL showIcon75;
	BOOL showDescription;
	BOOL showWhatsNew;
	BOOL showReleaseDate;
	BOOL showRequirements;
}
@property(assign) BOOL showRequirements;
@property(assign) BOOL showReleaseDate;
@property(assign) BOOL showWhatsNew;
@property(assign) BOOL showDescription;
@property(assign) BOOL showIcon75;
@property(assign) BOOL showRating;
@property(assign) BOOL showPrice;
@property(assign) BOOL showCopyright;
@property(assign) BOOL showLatestVersion;
@property(assign) BOOL showSize;
@property(assign) BOOL showCategory;
@property(assign) BOOL showSeller;
@property(assign) BOOL showName;
@property(assign) BOOL showITunesURL;
@property(assign) unsigned applicationID;
+(id)requestWithAllForApplication:(unsigned)application;
-(id)requestString;
@end

__attribute__((visibility("hidden")))
@interface APIApplicationResponse : APIResponse {
	APIApplicationIntern* application;
}
@property(retain, nonatomic) APIApplicationIntern* application;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APICheckUpdatesRequest : APIRequest {
	NSMutableArray* _appIDArray;
}
@property(retain, nonatomic) NSMutableArray* appIDArray;
-(void)dealloc;
-(void)addAppID:(id)anId;
-(id)description;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APICheckUpdatesRequestIntern : APIRequest {
	NSMutableArray* _appIDArray;
}
@property(retain, nonatomic) NSMutableArray* appIDArray;
-(void)dealloc;
-(id)description;
-(id)requestString;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APICheckUpdatesResponse : APIResponse {
	NSMutableDictionary* _versionsDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* versionsDictionary;
-(void)dealloc;
-(id)description;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ApptrackrAPIInternalBackendInterface : XXUnknownSuperclass {
}
+(id)urlEncodeValue:(id)value;
+(id)sendRequest:(id)request;
+(id)reportSubmit:(id)submit;
+(id)checkAuth:(id)auth;
+(id)checkUpdates:(id)updates;
+(id)suggestITunesIDs:(id)ids;
+(id)getITunesIDsWithRequest:(id)request;
+(id)getLinksWithRequest:(id)request;
+(id)getCategoriesWithRequest:(id)request;
+(id)getApplicationListWithRequest:(id)request;
+(id)getApplicationWithRequest:(id)request;
+(id)getScreenshotsWithRequest:(id)request;
+(id)errorForErrorCode:(int)errorCode;
@end

__attribute__((visibility("hidden")))
@interface APICategoryRequest : APIRequest {
}
-(id)requestString;
@end

__attribute__((visibility("hidden")))
@interface APICategoryResponse : APIResponse {
	NSMutableArray* categoriesArray;
}
@property(retain, nonatomic) NSMutableArray* categoriesArray;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIGetITunesIDsRequest : APIRequest {
	NSMutableDictionary* _idsDictionary;
	NSMutableArray* _completeIDsArray;
}
@property(retain, nonatomic) NSMutableArray* idsArray;
-(void)dealloc;
-(BOOL)shouldRequest;
-(id)description;
-(id)requestString;
-(void)addBundleIdentifier:(id)identifier;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APIGetITunesIDsResponse : APIResponse {
	NSMutableDictionary* _bundleIdentifiersAndIDs;
}
-(void)dealloc;
-(id)description;
-(id)allBundleIdentifiers;
-(id)appIDForBundleIdentifier:(id)bundleIdentifier;
-(void)addID:(id)anId forBundleIdentifier:(id)bundleIdentifier;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APISuggestITunesIDsRequest : APIRequest {
	NSMutableDictionary* _bundleIdentifiersWithIDDictionary;
}
-(void)dealloc;
-(id)description;
-(BOOL)shouldRequest;
-(id)requestString;
-(void)addID:(id)anId forBundleIdentifier:(id)bundleIdentifier;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APISuggestITunesIDsResponse : APIResponse {
}
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface APILink : XXUnknownSuperclass {
	BOOL active;
	unsigned applicationID;
	NSString* cracker;
	unsigned linkID;
	NSString* packageType;
	NSString* fileHoster;
	NSString* URL;
	NSString* version;
}
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* URL;
@property(retain, nonatomic) NSString* fileHoster;
@property(retain, nonatomic) NSString* packageType;
@property(assign) unsigned linkID;
@property(retain, nonatomic) NSString* cracker;
@property(assign) unsigned applicationID;
@property(assign) BOOL active;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APILinkRequest : APIRequest {
	unsigned applicationID;
	BOOL showAllVersions;
}
@property(assign) BOOL showAllVersions;
@property(assign) unsigned applicationID;
+(id)requestWithApplicationID:(unsigned)applicationID displayAllVersions:(BOOL)versions;
-(id)requestString;
@end

__attribute__((visibility("hidden")))
@interface APILinkResponse : APIResponse {
	NSMutableArray* versionsArray;
	NSMutableDictionary* linksDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* linksDictionary;
@property(retain, nonatomic) NSMutableArray* versionsArray;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SSCrypto : XXUnknownSuperclass {
	NSData* symmetricKey;
	NSData* cipherText;
	NSData* clearText;
	NSData* publicKey;
	NSData* privateKey;
	BOOL isSymmetric;
}
+(id)getMD5ForData:(id)data;
+(id)getSHA1ForData:(id)data;
+(id)getKeyDataWithLength:(int)length fromPassword:(id)password withSalt:(id)salt withIterations:(int)iterations;
+(id)getKeyDataWithLength:(int)length fromPassword:(id)password withSalt:(id)salt;
+(id)getKeyDataWithLength:(int)length;
+(id)generateRSAPublicKeyFromPrivateKey:(id)privateKey;
+(id)generateRSAPrivateKeyWithLength:(int)length;
-(id)description;
-(id)digest:(id)digest;
-(id)sign;
-(id)encrypt:(id)encrypt;
-(id)encrypt;
-(id)verify;
-(id)decrypt:(id)decrypt;
-(id)decrypt;
-(void)setCipherText:(id)text;
-(id)cipherTextAsString;
-(id)cipherTextAsData;
-(void)setClearTextWithString:(id)string;
-(void)setClearTextWithData:(id)data;
-(id)clearTextAsString;
-(id)clearTextAsData;
-(void)setPrivateKey:(id)key;
-(id)privateKey;
-(void)setPublicKey:(id)key;
-(id)publicKey;
-(void)setSymmetricKey:(id)key;
-(id)symmetricKey;
-(void)setIsSymmetric:(BOOL)symmetric;
-(BOOL)isSymmetric;
-(void)cleanupOpenSSL;
-(void)dealloc;
-(void)setupOpenSSL;
-(id)initWithPublicKey:(id)publicKey privateKey:(id)key;
-(id)initWithPrivateKey:(id)privateKey;
-(id)initWithPublicKey:(id)publicKey;
-(id)initWithSymmetricKey:(id)symmetricKey;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APIReportRequest : APIRequest {
	unsigned _linkID;
	unsigned _reason;
	unsigned _userID;
	NSString* _passwordHash;
}
@property(retain, nonatomic) NSString* passwordHash;
@property(assign, nonatomic) unsigned userID;
@property(assign, nonatomic) unsigned reason;
@property(assign, nonatomic) unsigned linkID;
+(id)requestWithLinkID:(unsigned)linkID reason:(unsigned)reason userID:(unsigned)anId andPasswordHash:(id)hash;
-(id)requestString;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface APIScreenshot : XXUnknownSuperclass {
	BOOL screenshotIsHorizontal;
	NSURL* screenshotURL;
}
@property(assign) BOOL screenshotIsHorizontal;
@property(retain, nonatomic) NSURL* screenshotURL;
-(void)dealloc;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface APIScreenshotRequest : APIRequest {
	unsigned appID;
}
@property(assign) unsigned appID;
+(id)screenshotRequestWithApplicationID:(unsigned)applicationID;
-(id)requestString;
-(id)initWithApplicationID:(unsigned)applicationID;
@end

__attribute__((visibility("hidden")))
@interface APIScreenshotResponse : APIResponse {
	NSMutableArray* screenshotsArray;
}
@property(retain, nonatomic) NSMutableArray* screenshotsArray;
-(void)dealloc;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface APIUserCheckAuthRequest : APIRequest {
	NSString* _username;
	NSString* _passwordHash;
}
@property(retain, nonatomic) NSString* passwordHash;
@property(retain, nonatomic) NSString* username;
-(void)dealloc;
-(id)requestString;
@end

__attribute__((visibility("hidden")))
@interface APIUserCheckAuthResponse : APIResponse {
	unsigned _userID;
}
@property(assign, nonatomic) unsigned userID;
@end

__attribute__((visibility("hidden")))
@interface HTTPAuthenticationRequest : XXUnknownSuperclass {
	BOOL isBasic;
	BOOL isDigest;
	NSString* base64Credentials;
	NSString* username;
	NSString* realm;
	NSString* nonce;
	NSString* uri;
	NSString* qop;
	NSString* nc;
	NSString* cnonce;
	NSString* response;
}
-(id)nonquotedSubHeaderFieldValue:(id)value fromHeaderFieldValue:(id)headerFieldValue;
-(id)quotedSubHeaderFieldValue:(id)value fromHeaderFieldValue:(id)headerFieldValue;
-(id)response;
-(id)cnonce;
-(id)nc;
-(id)qop;
-(id)uri;
-(id)nonce;
-(id)realm;
-(id)username;
-(id)base64Credentials;
-(BOOL)isDigest;
-(BOOL)isBasic;
-(void)dealloc;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface HTTPConnection : XXUnknownSuperclass {
	dispatch_queue_s* connectionQueue;
	GCDAsyncSocket* asyncSocket;
	HTTPConfig* config;
	BOOL started;
	HTTPMessage* request;
	unsigned numHeaderLines;
	BOOL sentResponseHeaders;
	NSString* nonce;
	long lastNC;
	NSObject<HTTPResponse>* httpResponse;
	NSMutableArray* ranges;
	NSMutableArray* ranges_headers;
	NSString* ranges_boundry;
	int rangeIndex;
	unsigned long long requestContentLength;
	unsigned long long requestContentLengthReceived;
	NSMutableArray* responseDataSizes;
}
+(void)removeRecentNonce:(id)nonce;
+(void)initialize;
-(void)die;
-(BOOL)shouldDie;
-(void)responseDidAbort:(id)response;
-(void)responseHasAvailableData:(id)data;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didWriteDataWithTag:(long)tag;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(id)preprocessErrorResponse:(id)response;
-(id)preprocessResponse:(id)response;
-(id)dateAsString:(id)string;
-(void)handleResourceNotFound;
-(void)handleUnknownMethod:(id)method;
-(void)handleInvalidRequest:(id)request;
-(void)handleAuthenticationFailed;
-(void)handleVersionNotSupported:(id)supported;
-(void)processDataChunk:(id)chunk;
-(void)prepareForBodyWithSize:(unsigned long long)size;
-(id)webSocketForURI:(id)uri;
-(id)httpResponseForMethod:(id)method URI:(id)uri;
-(id)filePathForURI:(id)uri;
-(id)directoryIndexFileNames;
-(void)continueSendingMultiRangeResponseBody;
-(void)continueSendingSingleRangeResponseBody;
-(void)continueSendingStandardResponseBody;
-(unsigned)writeQueueSize;
-(void)sendResponseHeadersAndBody;
-(id)chunkedTransferFooter;
-(id)chunkedTransferSizeLineForLength:(unsigned)length;
-(id)newMultiRangeResponse:(unsigned long long)response;
-(id)newUniRangeResponse:(unsigned long long)response;
-(void)replyToHTTPRequest;
-(id)requestURI;
-(BOOL)parseRangeRequest:(id)request withContentLength:(unsigned long long)contentLength;
-(id)parseGetParams;
-(id)parseParams:(id)params;
-(void)startReadingRequest;
-(void)startConnection;
-(void)stop;
-(void)start;
-(void)addBasicAuthChallenge:(id)challenge;
-(void)addDigestAuthChallenge:(id)challenge;
-(BOOL)isAuthenticated;
-(id)generateNonce;
-(id)passwordForUser:(id)user;
-(id)realm;
-(BOOL)useDigestAccessAuthentication;
-(BOOL)isPasswordProtected:(id)aProtected;
-(id)sslIdentityAndCertificates;
-(BOOL)isSecureServer;
-(BOOL)expectsRequestBodyFromMethod:(id)method atPath:(id)path;
-(BOOL)supportsMethod:(id)method atPath:(id)path;
-(void)dealloc;
-(id)initWithAsyncSocket:(id)asyncSocket configuration:(id)configuration;
@end

__attribute__((visibility("hidden")))
@interface HTTPConfig : XXUnknownSuperclass {
	HTTPServer* server;
	NSString* documentRoot;
	dispatch_queue_s* queue;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* queue;
@property(readonly, assign, nonatomic) NSString* documentRoot;
@property(readonly, assign, nonatomic) HTTPServer* server;
-(void)dealloc;
-(id)initWithServer:(id)server documentRoot:(id)root queue:(dispatch_queue_s*)queue;
-(id)initWithServer:(id)server documentRoot:(id)root;
@end

__attribute__((visibility("hidden")))
@interface HTTPMessage : XXUnknownSuperclass {
	CFHTTPMessageRef message;
}
@property(readonly, assign, nonatomic) CFHTTPMessageRef message;
-(id)description;
-(void)setBody:(id)body;
-(id)body;
-(id)messageData;
-(void)setHeaderField:(id)field value:(id)value;
-(id)headerField:(id)field;
-(id)allHeaderFields;
-(int)statusCode;
-(id)url;
-(id)method;
-(id)version;
-(BOOL)isHeaderComplete;
-(BOOL)appendData:(id)data;
-(void)dealloc;
-(id)initResponseWithStatusCode:(int)statusCode description:(id)description version:(id)version;
-(id)initRequestWithMethod:(id)method URL:(id)url version:(id)version;
-(id)initEmptyRequest;
@end

__attribute__((visibility("hidden")))
@interface HTTPServer : XXUnknownSuperclass <NSNetServiceDelegate> {
	dispatch_queue_s* serverQueue;
	dispatch_queue_s* connectionQueue;
	GCDAsyncSocket* asyncSocket;
	NSString* documentRoot;
	Class connectionClass;
	NSString* interface;
	unsigned short port;
	NSNetService* netService;
	NSString* domain;
	NSString* type;
	NSString* name;
	NSString* publishedName;
	NSDictionary* txtRecordDictionary;
	NSMutableArray* connections;
	NSMutableArray* webSockets;
	NSLock* connectionsLock;
	NSLock* webSocketsLock;
	BOOL isRunning;
}
+(void)performBonjourBlock:(id)block waitUntilDone:(BOOL)done;
+(void)performBonjourBlock:(id)block;
+(void)bonjourThread;
+(void)startBonjourThreadIfNeeded;
-(void)webSocketDidDie:(id)webSocket;
-(void)connectionDidDie:(id)connection;
-(void)netService:(id)service didNotPublish:(id)publish;
-(void)netServiceDidPublish:(id)netService;
-(void)republishBonjour;
-(void)unpublishBonjour;
-(void)publishBonjour;
-(void)socket:(id)socket didAcceptNewSocket:(id)socket2;
-(id)config;
-(unsigned)numberOfWebSocketConnections;
-(unsigned)numberOfHTTPConnections;
-(void)addWebSocket:(id)socket;
-(BOOL)isRunning;
-(BOOL)stop;
-(BOOL)start:(id*)start;
-(void)setTXTRecordDictionary:(id)dictionary;
-(id)TXTRecordDictionary;
-(void)setType:(id)type;
-(id)type;
-(void)setName:(id)name;
-(id)publishedName;
-(id)name;
-(void)setDomain:(id)domain;
-(id)domain;
-(void)setPort:(unsigned short)port;
-(unsigned short)listeningPort;
-(unsigned short)port;
-(void)setInterface:(id)interface;
-(id)interface;
-(void)setConnectionClass:(Class)aClass;
-(Class)connectionClass;
-(void)setDocumentRoot:(id)root;
-(id)documentRoot;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface HTTPAsyncFileResponse : XXUnknownSuperclass <HTTPResponse> {
	HTTPConnection* connection;
	NSString* filePath;
	unsigned long long fileLength;
	unsigned long long fileOffset;
	unsigned long long readOffset;
	BOOL aborted;
	NSData* data;
	int fileFD;
	void* readBuffer;
	unsigned readBufferSize;
	unsigned readBufferOffset;
	unsigned readRequestLength;
	dispatch_queue_s* readQueue;
	dispatch_source_s* readSource;
	BOOL readSourceSuspended;
}
-(void)dealloc;
-(void)connectionDidClose;
-(BOOL)isAsynchronous;
-(id)filePath;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)openFileIfNeeded;
-(BOOL)openFileAndSetupReadSource;
-(void)cancelReadSource;
-(void)resumeReadSource;
-(void)pauseReadSource;
-(void)processReadBuffer;
-(void)abort;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface HTTPDataResponse : XXUnknownSuperclass <HTTPResponse> {
	unsigned offset;
	NSData* data;
}
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(void)dealloc;
-(id)initWithData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface HTTPDynamicFileResponse : HTTPAsyncFileResponse {
	NSData* separator;
	NSDictionary* replacementDict;
}
-(void)dealloc;
-(void)processReadBuffer;
-(BOOL)isDone;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)isChunked;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection separator:(id)separator replacementDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface HTTPFileResponse : XXUnknownSuperclass <HTTPResponse> {
	HTTPConnection* connection;
	NSString* filePath;
	unsigned long long fileLength;
	unsigned long long fileOffset;
	BOOL aborted;
	int fileFD;
	void* buffer;
	unsigned bufferSize;
}
-(void)dealloc;
-(id)filePath;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)openFileIfNeeded;
-(BOOL)openFile;
-(void)abort;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface HTTPRedirectResponse : XXUnknownSuperclass <HTTPResponse> {
	NSString* redirectPath;
}
-(void)dealloc;
-(int)status;
-(id)httpHeaders;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface WebSocket : XXUnknownSuperclass {
	dispatch_queue_s* websocketQueue;
	HTTPMessage* request;
	GCDAsyncSocket* asyncSocket;
	NSData* term;
	BOOL isStarted;
	BOOL isOpen;
	BOOL isVersion76;
	id delegate;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* websocketQueue;
@property(assign) id delegate;
+(BOOL)isVersion76Request:(id)request;
+(BOOL)isWebSocketRequest:(id)request;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)didClose;
-(void)didReceiveMessage:(id)message;
-(void)sendMessage:(id)message;
-(void)didOpen;
-(void)sendResponseBody:(id)body;
-(id)processKey:(id)key;
-(void)sendResponseHeaders;
-(id)locationResponseHeaderValue;
-(id)originResponseHeaderValue;
-(void)readRequestBody;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)initWithRequest:(id)request socket:(id)socket;
@end

__attribute__((visibility("hidden")))
@interface DDASLLogger : DDAbstractLogger <DDLogger> {
	aslclient* client;
}
+(id)sharedInstance;
+(void)initialize;
-(id)loggerName;
-(void)logMessage:(id)message;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DDLogFileManagerDefault : XXUnknownSuperclass <DDLogFileManager> {
	unsigned maximumNumberOfLogFiles;
}
@property(assign) unsigned maximumNumberOfLogFiles;
-(id)createNewLogFile;
-(id)generateShortUUID;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(BOOL)isLogFile:(id)file;
-(id)logsDirectory;
-(void)deleteOldLogFiles;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DDLogFileFormatterDefault : XXUnknownSuperclass <DDLogFormatter> {
	NSDateFormatter* dateFormatter;
}
-(void)dealloc;
-(id)formatLogMessage:(id)message;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DDFileLogger : DDAbstractLogger <DDLogger> {
	id<DDLogFileManager> logFileManager;
	DDLogFileInfo* currentLogFileInfo;
	NSFileHandle* currentLogFileHandle;
	NSTimer* rollingTimer;
	unsigned long long maximumFileSize;
	double rollingFrequency;
}
@property(readonly, assign, nonatomic) id<DDLogFileManager> logFileManager;
@property(assign) double rollingFrequency;
@property(assign) unsigned long long maximumFileSize;
-(id)loggerName;
-(void)logMessage:(id)message;
-(id)currentLogFileHandle;
-(id)currentLogFileInfo;
-(void)maybeRollLogFileDueToSize;
-(void)maybeRollLogFileDueToAge:(id)age;
-(void)rollLogFileNow;
-(void)rollLogFile;
-(void)scheduleTimerToRollLogFileDueToAge;
-(void)dealloc;
-(id)initWithLogFileManager:(id)logFileManager;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DDLogFileInfo : XXUnknownSuperclass {
	NSString* filePath;
	NSString* fileName;
	NSDictionary* fileAttributes;
	NSDate* creationDate;
	NSDate* modificationDate;
	unsigned long long fileSize;
}
@property(assign, nonatomic) BOOL isArchived;
@property(readonly, assign, nonatomic) double age;
@property(readonly, assign, nonatomic) unsigned long long fileSize;
@property(readonly, assign, nonatomic) NSDate* modificationDate;
@property(readonly, assign, nonatomic) NSDate* creationDate;
@property(readonly, assign, nonatomic) NSDictionary* fileAttributes;
@property(readonly, assign, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) NSString* filePath;
+(id)logFileWithPath:(id)path;
-(int)reverseCompareByModificationDate:(id)date;
-(int)reverseCompareByCreationDate:(id)date;
-(BOOL)isEqual:(id)equal;
-(void)removeExtendedAttributeWithName:(id)name;
-(void)addExtendedAttributeWithName:(id)name;
-(BOOL)hasExtendedAttributeWithName:(id)name;
-(void)renameFile:(id)file;
-(void)reset;
-(void)dealloc;
-(id)initWithFilePath:(id)filePath;
@end

__attribute__((visibility("hidden")))
@interface DDLog : XXUnknownSuperclass {
}
+(void)lt_flush;
+(void)lt_log:(id)log;
+(void)lt_removeAllLoggers;
+(void)lt_removeLogger:(id)logger;
+(void)lt_addLogger:(id)logger;
+(void)setLogLevel:(int)level forClassWithName:(id)name;
+(void)setLogLevel:(int)level forClass:(Class)aClass;
+(int)logLevelForClassWithName:(id)name;
+(int)logLevelForClass:(Class)aClass;
+(id)registeredClassNames;
+(id)registeredClasses;
+(BOOL)isRegisteredClass:(Class)aClass;
+(void)flushLog;
+(void)log:(BOOL)log level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line format:(id)format;
+(void)queueLogMessage:(id)message synchronously:(BOOL)synchronously;
+(void)removeAllLoggers;
+(void)removeLogger:(id)logger;
+(void)addLogger:(id)logger;
+(void)applicationWillTerminate:(id)application;
+(dispatch_queue_s*)loggingQueue;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface DDLogMessage : XXUnknownSuperclass {
	int logLevel;
	int logFlag;
	int logContext;
	NSString* logMsg;
	NSDate* timestamp;
	const char* file;
	const char* function;
	int lineNumber;
	unsigned machThreadID;
	NSString* threadID;
	NSString* fileName;
	NSString* methodName;
}
-(void)dealloc;
-(id)methodName;
-(id)fileName;
-(id)threadID;
-(id)initWithLogMsg:(id)logMsg level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line;
@end

__attribute__((visibility("hidden")))
@interface DDAbstractLogger : XXUnknownSuperclass <DDLogger> {
	id<DDLogFormatter> formatter;
	dispatch_queue_s* loggerQueue;
}
-(dispatch_queue_s*)loggerQueue;
-(void)setLogFormatter:(id)formatter;
-(id)logFormatter;
-(void)logMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DDTTYLogger : DDAbstractLogger <DDLogger> {
	BOOL isaTTY;
	NSDateFormatter* dateFormatter;
	char* app;
	char* pid;
	unsigned long appLen;
	unsigned long pidLen;
}
+(id)sharedInstance;
+(void)initialize;
-(id)loggerName;
-(void)logMessage:(id)message;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncReadPacket : XXUnknownSuperclass {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void)dealloc;
-(int)searchForTermAfterPreBuffering:(long)termAfterPreBuffering;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTermWithHint:(unsigned)hint shouldPreBuffer:(BOOL*)buffer;
-(unsigned)readLengthForNonTermWithHint:(unsigned)hint;
-(void)ensureCapacityForReadOfLength:(unsigned)length;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncWritePacket : XXUnknownSuperclass {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void)dealloc;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncSpecialPacket : XXUnknownSuperclass {
	NSDictionary* tlsSettings;
}
-(void)dealloc;
-(id)initWithTLSSettings:(id)tlssettings;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncSocket : XXUnknownSuperclass {
	unsigned short flags;
	unsigned short config;
	id delegate;
	dispatch_queue_s* delegateQueue;
	int socket4FD;
	int socket6FD;
	int connectIndex;
	NSData* connectInterface4;
	NSData* connectInterface6;
	dispatch_queue_s* socketQueue;
	dispatch_source_s* accept4Source;
	dispatch_source_s* accept6Source;
	dispatch_source_s* connectTimer;
	dispatch_source_s* readSource;
	dispatch_source_s* writeSource;
	dispatch_source_s* readTimer;
	dispatch_source_s* writeTimer;
	NSMutableArray* readQueue;
	NSMutableArray* writeQueue;
	GCDAsyncReadPacket* currentRead;
	GCDAsyncWritePacket* currentWrite;
	unsigned long socketFDBytesAvailable;
	NSMutableData* partialReadBuffer;
	struct {
		int version;
		void* info;
		/*function-pointer*/ void* retain;
		/*function-pointer*/ void* release;
		/*function-pointer*/ void* copyDescription;
	} streamContext;
	CFReadStreamRef readStream;
	CFWriteStreamRef writeStream;
}
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
+(BOOL)getHost:(id*)host port:(unsigned short*)port fromAddress:(id)address;
+(unsigned short)portFromAddress:(id)address;
+(id)hostFromAddress:(id)address;
+(unsigned short)portFromAddress6:(sockaddr_in6*)address6;
+(unsigned short)portFromAddress4:(sockaddr_in*)address4;
+(id)hostFromAddress6:(sockaddr_in6*)address6;
+(id)hostFromAddress4:(sockaddr_in*)address4;
+(void)removeHandshakeListener:(id)listener;
+(void)addHandshakeListener:(id)listener;
+(void)sslHandshakeThread;
+(void)startHandshakeThreadIfNeeded;
-(BOOL)enableBackgroundingOnSocketWithCaveat;
-(BOOL)enableBackgroundingOnSocket;
-(BOOL)enableBackgroundingOnSocketWithCaveat:(BOOL)caveat;
-(CFWriteStreamRef)writeStream;
-(CFReadStreamRef)readStream;
-(int)socket6FD;
-(int)socket4FD;
-(int)socketFD;
-(void)performBlock:(id)block;
-(void)maybeStartTLS;
-(BOOL)createReadAndWriteStream;
-(void)abortSSLHandshake:(id)handshake;
-(void)finishSSLHandshake;
-(void)startTLS:(id)tls;
-(void)doWriteTimeoutWithExtension:(double)extension;
-(void)doWriteTimeout;
-(void)setupWriteTimerWithTimeout:(double)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(void)doWriteData;
-(void)maybeDequeueWrite;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeoutWithExtension:(double)extension;
-(void)doReadTimeout;
-(void)setupReadTimerWithTimeout:(double)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doReadEOF;
-(void)doReadData;
-(void)maybeDequeueRead;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(void)resumeWriteSource;
-(void)suspendWriteSource;
-(void)resumeReadSource;
-(void)suspendReadSource;
-(void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)newlyConnectedSocket;
-(void)getInterfaceAddress4:(id*)a4 address6:(id*)a6 fromDescription:(id)description port:(unsigned short)port;
-(BOOL)isIPv6;
-(BOOL)isIPv4;
-(id)localAddress;
-(id)connectedAddress;
-(unsigned short)localPortFromSocket6:(int)socket6;
-(unsigned short)localPortFromSocket4:(int)socket4;
-(id)localHostFromSocket6:(int)socket6;
-(id)localHostFromSocket4:(int)socket4;
-(unsigned short)connectedPortFromSocket6:(int)socket6;
-(unsigned short)connectedPortFromSocket4:(int)socket4;
-(id)connectedHostFromSocket6:(int)socket6;
-(id)connectedHostFromSocket4:(int)socket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(unsigned short)localPort;
-(id)localHost;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isDisconnected;
-(id)otherError:(id)error;
-(id)connectionClosedError;
-(id)writeTimeoutError;
-(id)readTimeoutError;
-(id)readMaxedOutError;
-(id)connectTimeoutError;
-(id)sslError:(long)error;
-(id)errnoError;
-(id)errnoErrorWithReason:(id)reason;
-(id)gaiError:(int)error;
-(id)badParamError:(id)error;
-(id)badConfigError:(id)error;
-(void)maybeClose;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)closeWithError:(id)error;
-(void)doConnectTimeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(void)didNotConnect:(int)connect error:(id)error;
-(void)didConnect:(int)connect;
-(void)lookup:(int)lookup didFail:(id)fail;
-(void)lookup:(int)lookup didSucceedWithAddress4:(id)address4 address6:(id)a6;
-(void)lookup:(int)lookup host:(id)host port:(unsigned short)port;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)doAccept:(int)accept;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(void)setPreferIPv4OverIPv6:(BOOL)a6;
-(BOOL)isIPv4PreferredOverIPv6;
-(void)setIPv6Enabled:(BOOL)enabled;
-(BOOL)isIPv6Enabled;
-(void)setIPv4Enabled:(BOOL)enabled;
-(BOOL)isIPv4Enabled;
-(void)setAutoDisconnectOnClosedReadStream:(BOOL)stream;
-(BOOL)autoDisconnectOnClosedReadStream;
-(void)setDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(void)getDelegate:(id*)delegate delegateQueue:(dispatch_queue_s**)queue;
-(void)setDelegateQueue:(dispatch_queue_s*)queue;
-(dispatch_queue_s*)delegateQueue;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue socketQueue:(dispatch_queue_s*)queue3;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(id)initWithSocketQueue:(dispatch_queue_s*)socketQueue;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LSHTTPConnection : HTTPConnection {
	NSFileHandle* _writeHandle;
}
@property(retain, nonatomic) NSFileHandle* writeHandle;
-(void)dealloc;
-(void)processDataChunk:(id)chunk;
-(void)prepareForBodyWithSize:(unsigned long long)size;
-(id)httpResponseForMethod:(id)method URI:(id)uri;
-(BOOL)expectsRequestBodyFromMethod:(id)method atPath:(id)path;
-(BOOL)supportsMethod:(id)method atPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface MyHTTPConnection : HTTPConnection {
	int dataStartIndex;
	NSMutableArray* multipartData;
	BOOL postHeaderOK;
}
-(void)processDataChunk:(id)chunk;
-(id)httpResponseForMethod:(id)method URI:(id)uri;
-(BOOL)supportsPOST:(id)post withSize:(unsigned long long)size;
-(BOOL)supportsMethod:(id)method atPath:(id)path;
-(id)createBrowseableIndex:(id)index;
-(BOOL)isBrowseable:(id)browseable;
@end

__attribute__((visibility("hidden")))
@interface LSReceiveConnection : XXUnknownSuperclass <NWConnectionDelegate, UIAlertViewDelegate> {
	NWConnection* _connection;
	NSString* _host;
	unsigned short _port;
	id<LSReceiveConnectionDelegate> _delegate;
	NSDictionary* _metadata;
	BOOL _didReceiveURL;
	UIImage* _image;
}
@property(readonly, assign, nonatomic) NSURL* IPAURL;
@property(retain) UIImage* image;
@property(readonly, assign, nonatomic) NSString* host;
@property(assign, nonatomic) id<LSReceiveConnectionDelegate> delegate;
@property(retain, nonatomic) NWConnection* connection;
-(void)dealloc;
-(void)connectionDidConnect:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connectionTerminated:(id)terminated;
-(void)connectionAttemptFailed:(id)failed;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)initWithConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface LSReceiveServer : XXUnknownSuperclass <NWServerDelegate, LSReceiveConnectionDelegate> {
	NWServer* _server;
	BOOL _enabled;
	BOOL _isRunning;
	NSMutableArray* _pendingConnectionsArray;
	id<LSReceiveServerDelegate> _delegate;
}
@property(retain, nonatomic) NSMutableArray* pendingConnectionsArray;
@property(retain, nonatomic) NWServer* server;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(assign, nonatomic) id<LSReceiveServerDelegate> delegate;
+(id)sharedServer;
-(void)dealloc;
-(void)handleNewConnection:(id)connection;
-(void)serverFailed:(id)failed reason:(id)reason;
-(void)connectionDidReceiveIPAURL:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinish:(id)connection;
-(void)stop;
-(void)start;
-(id)init;
-(void)_applicationWillEnterForegroundCallback:(id)_application;
-(void)_applicationDidEnterBackgroundCallback:(id)_application;
-(void)stopAndDestroySharedServer;
@end

__attribute__((visibility("hidden")))
@interface LSClient : XXUnknownSuperclass <NWConnectionDelegate> {
	NSNetService* _netService;
	NWConnection* _connection;
	LSPushRequest* _request;
	BOOL _isDone;
	id _completionHandler;
}
@property(copy, nonatomic) id completionHandler;
@property(readonly, assign, nonatomic) BOOL isThisDevice;
@property(readonly, assign, nonatomic) NSString* hostName;
@property(retain, nonatomic) NSNetService* netService;
-(void)dealloc;
-(void)connectionDidConnect:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connectionTerminated:(id)terminated;
-(void)connectionAttemptFailed:(id)failed;
-(void)pushRequest:(id)request withCompletionHandler:(id)completionHandler;
-(void)pushRequest:(id)request;
-(id)initWithNetService:(id)netService;
@end

__attribute__((visibility("hidden")))
@interface LSFileServer : XXUnknownSuperclass {
	HTTPServer* _server;
	BOOL _isRunning;
	unsigned short _port;
	BOOL _enabled;
	NSString* _externURLAdress;
}
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic) NSString* rootDirectory;
@property(readonly, assign, nonatomic) unsigned short port;
@property(readonly, assign, nonatomic) BOOL isRunning;
@property(retain, nonatomic) HTTPServer* server;
@property(readonly, assign, nonatomic) NSString* externURLAdress;
+(id)sharedServerWithRootDirectory:(id)rootDirectory;
+(id)sharedServer;
-(void)dealloc;
-(void)stop;
-(id)deviceIPAdress;
-(void)removeBundleRessourcesFromRootDirectory;
-(void)copyBundleRessourcesIntoRootDirectory;
-(void)start;
-(id)initWithRootDirectory:(id)rootDirectory;
-(id)init;
-(void)_applicationWillEnterForegroundCallback:(id)_application;
-(void)_applicationDidEnterBackgroundCallback:(id)_application;
-(id)retain;
-(id)autorelease;
-(void)release;
@end

__attribute__((visibility("hidden")))
@interface LSPushRequest : XXUnknownSuperclass {
	NSString* _bundleIdentifier;
	NSString* _imageFilePath;
	NSString* _subtitle;
	NSString* _IPAFilePath;
	NSURL* _webserverRootDirectory;
	NSString* _title;
	unsigned short _webserverPort;
	NSString* _manifestURLString;
	NSURL* _externURLToRootDirectory;
	BOOL _didPrepareFileSystem;
}
@property(copy, nonatomic) NSURL* externURLToRootDirectory;
@property(readonly, assign, nonatomic) NSString* manifestURLString;
@property(readonly, assign, nonatomic) unsigned short webserverPort;
@property(readonly, assign, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) NSURL* webserverRootDirectory;
@property(readonly, assign, nonatomic) NSString* IPAFilePath;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* imageFilePath;
@property(copy, nonatomic) NSString* bundleIdentifier;
-(void)dealloc;
-(void)prepareFileSystemForTransferingIPA;
-(id)initWithIPAFilePath:(id)ipafilePath webserverPort:(unsigned short)port title:(id)title webserverRootDirectory:(id)directory;
@end

__attribute__((visibility("hidden")))
@interface LSServiceBrowser : XXUnknownSuperclass <NWServerBrowserDelegate> {
	NWServerBrowser* _browser;
	NSMutableArray* _clients;
	id<LSServiceBrowserDelegate> _delegate;
}
@property(assign, nonatomic) id<LSServiceBrowserDelegate> delegate;
@property(readonly, assign, nonatomic) NSMutableArray* clients;
-(void)dealloc;
-(void)updateServerList;
-(void)_applicationWillEnterForegroundCallback:(id)_application;
-(void)_applicationDidEnterBackgroundCallback:(id)_application;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NWConnection : XXUnknownSuperclass <NSNetServiceDelegate> {
	id<NWConnectionDelegate> delegate;
	NSString* host;
	int port;
	int connectedSocketHandle;
	NSNetService* netService;
	CFReadStreamRef readStream;
	bool readStreamOpen;
	NSMutableData* incomingDataBuffer;
	int packetBodySize;
	CFWriteStreamRef writeStream;
	bool writeStreamOpen;
	NSMutableData* outgoingDataBuffer;
}
@property(retain, nonatomic) NSNetService* netService;
@property(assign, nonatomic) int connectedSocketHandle;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* host;
@property(assign, nonatomic) id<NWConnectionDelegate> delegate;
-(void)netServiceDidResolveAddress:(id)netService;
-(void)netService:(id)service didNotResolve:(id)resolve;
-(void)writeOutgoingBufferToStream;
-(void)writeStreamHandleEvent:(unsigned long)event;
-(void)readFromStreamIntoIncomingBuffer;
-(void)readStreamHandleEvent:(unsigned long)event;
-(void)sendData:(id)data;
-(void)close;
-(BOOL)setupSocketStreams;
-(BOOL)connect;
-(id)initWithNetService:(id)netService;
-(id)initWithNativeSocketHandle:(int)nativeSocketHandle;
-(id)initWithHostAddress:(id)hostAddress andPort:(int)port;
-(void)dealloc;
-(void)clean;
@end

__attribute__((visibility("hidden")))
@interface NWServer : XXUnknownSuperclass <NSNetServiceDelegate> {
	unsigned short port;
	CFSocketRef listeningSocket;
	id<NWServerDelegate> delegate;
	NSNetService* netService;
	NSString* _serviceName;
	NSString* _deviceName;
}
@property(retain, nonatomic) NSNetService* netService;
@property(assign, nonatomic) unsigned short port;
@property(copy, nonatomic) NSString* deviceName;
@property(copy, nonatomic) NSString* serviceName;
@property(assign, nonatomic) id<NWServerDelegate> delegate;
-(void)netService:(id)service didNotPublish:(id)publish;
-(void)unpublishService;
-(BOOL)publishService;
-(void)terminateServer;
-(BOOL)createServer;
-(void)handleNewNativeSocket:(int)socket usedConnection:(id*)connection;
-(void)stop;
-(BOOL)start;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NWServerBrowser : XXUnknownSuperclass <NSNetServiceBrowserDelegate> {
	NSNetServiceBrowser* netServiceBrowser;
	NSMutableArray* servers;
	id<NWServerBrowserDelegate> delegate;
	NSString* _serviceName;
}
@property(copy, nonatomic) NSString* serviceName;
@property(assign, nonatomic) id<NWServerBrowserDelegate> delegate;
@property(readonly, assign, nonatomic) NSArray* servers;
-(void)netServiceBrowser:(id)browser didRemoveService:(id)service moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didFindService:(id)service moreComing:(BOOL)coming;
-(void)netServiceBrowser:(id)browser didNotSearch:(id)search;
-(void)sortServers;
-(void)stop;
-(BOOL)start;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface UITableViewAlertView : XXUnknownSuperclass <UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate> {
	UITableView* _tableView;
	NSArray* _content;
	BOOL _dismissIfRowSelected;
	id<UITableViewAlertViewDelegate> _myDelegate;
	NSMutableDictionary* _animatingIndexes;
}
@property(assign, nonatomic) id<UITableViewAlertViewDelegate> myDelegate;
@property(assign, nonatomic) BOOL dismissIfRowSelected;
@property(retain, nonatomic) NSArray* content;
@property(readonly, assign, nonatomic) UITableView* tableView;
-(void)dealloc;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)resetAnimatingIndexes;
-(void)stopIndexAnimating:(int)animating;
-(void)setIndexAnimating:(int)animating;
-(id)initWithTitle:(id)title content:(id)content delegate:(id)delegate cancelButtonTitle:(id)title4;
@end

__attribute__((visibility("hidden")))
@interface UITableViewAlertViewTableViewBackgroundView : XXUnknownSuperclass {
}
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface UITableViewAlertViewTableViewCell : XXUnknownSuperclass {
	UIActivityIndicatorView* _activityIndicatorView;
	UITableViewAlertViewTableViewCellSeperatorView* _seperatorView;
}
@property(readonly, assign, nonatomic) UIActivityIndicatorView* activityIndicatorView;
-(void)dealloc;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface UITableViewAlertViewTableViewCellSeperatorView : XXUnknownSuperclass {
}
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface APIUpdatesManager : XXUnknownSuperclass {
	BOOL _isUpdatingApplications;
	id<APIUpdatesManagerDelegate> _delegate;
	NSArray* _applicationsWithUpdate;
}
@property(retain, nonatomic) NSArray* applicationsWithUpdate;
@property(assign, nonatomic) id<APIUpdatesManagerDelegate> delegate;
-(void)dealloc;
-(void)ignoreCurrentVersionForApplication:(id)application;
-(void)checkForUpdates;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APILocalApplication : APIApplication <NSCoding> {
	NSString* _bundleVersion;
	NSString* _shortBundleVersion;
	NSString* _platformVersion;
	NSString* _iconPath;
	NSString* _bundleIdentifier;
	NSString* _apptrackrVersion;
	NSString* _ignoredApptrackrVersion;
	NSString* _containerPath;
	NSString* _appPath;
}
@property(readonly, assign, nonatomic) BOOL needsUpdate;
@property(copy, nonatomic) NSString* appPath;
@property(readonly, assign, nonatomic) NSString* localVersion;
@property(copy, nonatomic) NSString* containerPath;
@property(copy, nonatomic) NSString* ignoredApptrackrVersion;
@property(copy, nonatomic) NSString* apptrackrVersion;
@property(copy, nonatomic) NSString* bundleIdentifier;
@property(copy, nonatomic) NSString* iconPath;
@property(copy, nonatomic) NSString* platformVersion;
@property(copy, nonatomic) NSString* shortBundleVersion;
@property(copy, nonatomic) NSString* bundleVersion;
+(id)localApplicationFromContainerPath:(id)containerPath;
-(void)downloadImage;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)initWithContainerPath:(id)containerPath;
-(id)image;
@end

__attribute__((visibility("hidden")))
@interface INUpdatesViewController : XXUnknownSuperclass <APIUpdatesManagerDelegate> {
	NSArray* _applicationsWithUpdates;
	UILabel* _statusLabel;
	BOOL _pushApplicationViewController;
	id<INUpdatesViewControllerDelegate> _delegate;
}
@property(assign, nonatomic) id<INUpdatesViewControllerDelegate> delegate;
@property(assign, nonatomic) BOOL pushApplicationViewController;
@property(retain, nonatomic) UILabel* statusLabel;
@property(retain, nonatomic) NSArray* applicationsWithUpdates;
-(void)updatesManager:(id)manager didFailToSearchForUpdates:(id)updates;
-(void)updatesManagerDidUpdateApplicationsWithUpdates:(id)updatesManager;
-(void)updatesManagerWillStartDownloadingUpdates:(id)updatesManager;
-(void)updateTableViewHeaderAndFooterViewsForState:(BOOL)state;
-(void)rebuildTableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface INLocalApplication : XXUnknownSuperclass {
}
+(void)restoreFakeMetadata;
+(void)removeFakeMetadata;
@end

__attribute__((visibility("hidden")))
@interface MODisplayFontsView : XXUnknownSuperclass <UITableViewDelegate, UITableViewDataSource> {
	NSString* sampleString;
	NSMutableArray* fontNames;
}
@property(retain, nonatomic) NSString* sampleString;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MOAssociation : XXUnknownSuperclass {
	id key;
	id value;
}
@property(retain) id value;
@property(retain) id key;
+(id)key:(id)key value:(id)value;
-(id)description;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MOButton : XXUnknownSuperclass {
	UIColor* normalBackgroundColor;
	UIColor* highlightedBackgroundColor;
	UIColor* disabledBackgroundColor;
}
@property(retain, nonatomic) UIColor* disabledBackgroundColor;
@property(retain, nonatomic) UIColor* highlightedBackgroundColor;
@property(retain, nonatomic) UIColor* normalBackgroundColor;
-(void)buttonDown:(id)down event:(id)event;
-(void)buttonUp:(id)up event:(id)event;
-(void)setEnabled:(BOOL)enabled;
-(void)setBackgroundColor:(id)color forState:(unsigned)state;
-(void)dealloc;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
-(void)setupStateChangeHandlers;
@end

__attribute__((visibility("hidden")))
@interface MOGlassButton : MOButton {
	CAGradientLayer* gradientLayer1;
	CAGradientLayer* gradientLayer2;
	CALayer* outlineLayer;
}
@property(retain, nonatomic) CALayer* outlineLayer;
@property(retain, nonatomic) CAGradientLayer* gradientLayer2;
@property(retain, nonatomic) CAGradientLayer* gradientLayer1;
-(void)setupAsSmallRedButton;
-(void)setupAsSmallGreenButton;
-(void)setupAsRedButton;
-(void)setupAsGreenButton;
-(void)setupForStandardButtons;
-(void)layoutSubviews;
-(void)dealloc;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
-(void)setupLayers;
@end

__attribute__((visibility("hidden")))
@interface SFHFKeychainUtils : XXUnknownSuperclass {
}
+(BOOL)deleteItemForUsername:(id)username andServiceName:(id)name error:(id*)error;
+(BOOL)storeUsername:(id)username andPassword:(id)password forServiceName:(id)serviceName updateExisting:(BOOL)existing error:(id*)error;
+(id)getPasswordForUsername:(id)username andServiceName:(id)name error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface JKArray : XXUnknownSuperclass <NSCopying, NSMutableCopying, NSFastEnumeration> {
	id* objects;
	unsigned count;
	unsigned capacity;
	unsigned mutations;
}
+(id)allocWithZone:(NSZone*)zone;
+(void)load;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(void)getObjects:(id*)objects range:(NSRange)range;
-(unsigned)count;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface JKMutableArray : XXUnknownSuperclass {
}
+(void)load;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface JKDictionaryEnumerator : XXUnknownSuperclass {
	id collection;
	unsigned nextObject;
}
-(id)nextObject;
-(id)allObjects;
-(void)dealloc;
-(id)initWithJKDictionary:(id)jkdictionary;
@end

__attribute__((visibility("hidden")))
@interface JKDictionary : XXUnknownSuperclass <NSCopying, NSMutableCopying, NSFastEnumeration> {
	unsigned count;
	unsigned capacity;
	unsigned mutations;
	JKHashTableEntry* entry;
}
+(id)allocWithZone:(NSZone*)zone;
+(void)load;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(id)keyEnumerator;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)getObjects:(id*)objects andKeys:(id*)keys;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface JKMutableDictionary : XXUnknownSuperclass {
}
+(void)load;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface JSONDecoder : XXUnknownSuperclass {
	JKParseState* parseState;
}
+(id)decoderWithParseOptions:(unsigned)parseOptions;
+(id)decoder;
+(void)load;
-(id)mutableObjectWithData:(id)data error:(id*)error;
-(id)mutableObjectWithData:(id)data;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)objectWithData:(id)data error:(id*)error;
-(id)objectWithData:(id)data;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)parseJSONData:(id)data error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length error:(id*)error;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length;
-(void)clearCache;
-(void)dealloc;
-(id)initWithParseOptions:(unsigned)parseOptions;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface APIBundle : XXUnknownSuperclass {
}
+(BOOL)suggestLocaliTunesIDs:(id*)ids;
@end

__attribute__((visibility("hidden")))
@interface IPADownload : XXUnknownSuperclass {
	NSObject<IPADownloadDelegate>* delegate;
	NSObject<IPADownloadProgressDelegate>* progressDelegate;
	NSString* fileName;
	BOOL isDownloadingIPA;
	long long maxDownloadSize;
	long long recievedBytes;
	UIImage* applicationImage;
	NSMutableArray* _downloadTimes;
	NSMutableArray* _downloadSizes;
	BOOL _showStarted;
}
@property(retain, nonatomic) NSMutableArray* downloadSizes;
@property(retain, nonatomic) NSMutableArray* downloadTimes;
@property(assign) id progressDelegate;
@property(assign) id delegate;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) UIImage* applicationImage;
@property(assign, nonatomic) BOOL showStarted;
@property(assign) long long recievedBytes;
@property(assign) long long maxDownloadSize;
@property(assign) BOOL isDownloadingIPA;
-(void)dealloc;
-(void)cancel;
-(id)initWithImage:(id)image andDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface IPATorrentDownload : IPADownload <TRTorrentDelegate> {
	TRTorrent* _torrent;
	NSString* _magnetLink;
	int _result;
}
@property(readonly, assign, nonatomic) NSString* magnetLink;
@property(readonly, assign, nonatomic) TRTorrent* torrent;
-(void)dealloc;
-(BOOL)changingStatus;
-(void)resumeTransfer;
-(void)pauseTransfer;
-(void)TRTorrentDidFinishDownloading:(id)trtorrent;
-(void)startTransfer;
-(unsigned)totalConnectedPeers;
-(void)TRTorrentReceivedMetadata:(id)metadata;
-(BOOL)isFinishedDownloading;
-(BOOL)isFinishedAndSeeding;
-(BOOL)isActive;
-(void)TRTorrentStatsUpdated:(id)updated;
-(float)metaDataProgress;
-(BOOL)isDownloadingIPA;
-(BOOL)isMagnet;
-(void)cancel;
-(id)initWithTorrentPath:(id)torrentPath magnetName:(id)name magnetLink:(id)link andImage:(id)image andDelegate:(id)delegate result:(int*)result;
-(id)initWithMagnetURI:(id)magnetURI andImage:(id)image andDelegate:(id)delegate result:(int*)result;
@end

__attribute__((visibility("hidden")))
@interface TRSettings : XXUnknownSuperclass {
	BOOL _upnpenabled;
	BOOL _randomPort;
	NSString* _downloadPath;
	unsigned _peerMaxTotal;
	unsigned _peerMaxPerTorrent;
	double _updateTimer;
	unsigned _bindPort;
	NSString* _configPath;
	BOOL _uspeedLimited;
	double _uspeedLimit;
	NSString* configPath;
}
@property(assign, nonatomic) double uspeedLimit;
@property(assign, nonatomic) BOOL uspeedLimited;
@property(retain, nonatomic) NSString* configPath;
@property(assign, nonatomic) unsigned bindPort;
@property(assign, nonatomic) double updateTimer;
@property(assign, nonatomic) unsigned peerMaxPerTorrent;
@property(assign, nonatomic) unsigned peerMaxTotal;
@property(retain, nonatomic) NSString* downloadPath;
@property(assign, nonatomic) BOOL randomPort;
@property(assign, nonatomic) BOOL upnpenabled;
+(id)sharedSettings;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TRSessionController : XXUnknownSuperclass {
	tr_session* _handle;
	NSMutableArray* _torrents;
	id<TRSessionControllerDelegate> delegate;
}
@property(assign, nonatomic) id<TRSessionControllerDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* torrents;
@property(assign, nonatomic) tr_session* handle;
+(id)sharedController;
-(BOOL)isUpSpeedLimited;
-(void)handleConnectivity;
-(void)_setMaxPeerLimitPerTorrent:(unsigned)torrent;
-(void)_setMaxGlobalPeerLimit:(unsigned)limit;
-(void)bindPortNotificatoinHandler;
-(void)upnpChangeNotificationHandler;
-(void)maxTorrentPeerLimitNotificationHandler;
-(void)maxGlobalPeerLimitNotificationHandler;
-(void)registerNotifications;
-(void)dealloc;
-(void)removeTorrent:(id)torrent;
-(id)openTorrentFile:(id)file result:(int*)result;
-(id)openMagnetURI:(id)uri result:(int*)result;
-(id)nameFromMagnetLink:(id)magnetLink;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TRTorrent : XXUnknownSuperclass {
	tr_torrent* _handle;
	tr_stat* _stat;
	tr_info* _info;
	tr_file_stat* _fileStat;
	NSString* _hashString;
	NSArray* _fileList;
	NSArray* _flatFileList;
	NSDate* _lastUpdated;
	int state;
	NSTimer* updateTimer;
	id<TRTorrentDelegate> _delegate;
	NSLock* handleLock;
	dispatch_queue_s* updateDispatch;
	BOOL isUpdating;
	BOOL changingStatus;
	TRSessionController* _controller;
	BOOL _changingStatus;
}
@property(readonly, assign, nonatomic) BOOL changingStatus;
@property(assign, nonatomic) id<TRTorrentDelegate> delegate;
@property(readonly, assign, nonatomic) int state;
@property(assign, nonatomic) TRSessionController* controller;
@property(retain, nonatomic) NSDate* lastUpdated;
@property(retain, nonatomic) NSArray* flatFileList;
@property(retain, nonatomic) NSArray* fileList;
@property(retain, nonatomic) NSString* hashString;
@property(assign) tr_file_stat* fileStat;
@property(assign, nonatomic) tr_info* info;
@property(assign) tr_stat* stat;
@property(assign, nonatomic) tr_torrent* handle;
-(void)dealloc;
-(id)torrentLocation;
-(void)finishTorrent:(id)torrent;
-(void)__finishBackground:(id)background;
-(void)killTimer;
-(void)updateFileStat;
-(id)ipaName;
-(int)fileCount;
-(BOOL)isMagnet;
-(void)resetCache;
-(BOOL)isMultiFileOrFolder;
-(unsigned long long)uploadedTotal;
-(unsigned long long)downloadedTotal;
-(float)totalRate;
-(float)uploadRate;
-(float)downloadRate;
-(int)totalPeersConnected;
-(id)errorMessage;
-(BOOL)isAnyErrorOrWarning;
-(BOOL)hasError;
-(BOOL)isFinishedSeeding;
-(BOOL)isComplete;
-(BOOL)allDownloaded;
-(BOOL)isCheckingWaiting;
-(BOOL)isChecking;
-(BOOL)isSeeding;
-(BOOL)isActive;
-(float)availableDesired;
-(float)checkingProgress;
-(float)metaDataProgress;
-(float)progressLeft;
-(float)progressDone;
-(float)progress;
-(int)pieceCount;
-(int)pieceSize;
-(unsigned long long)sizeRemaining;
-(unsigned long long)size;
-(float)ratio;
-(id)torrentName;
-(void)update;
-(void)__updateStats;
-(void)timerUpdate;
-(void)manualAnnounce;
-(BOOL)canManualAnnounce;
-(float)getAmountFinishedWithSize:(int)size;
-(BOOL)getAvailabilityWithSize:(int)size;
-(id)notificationObject;
-(void)removeTorrent;
-(void)__removeBackground;
-(void)stopTransfer;
-(void)__backgroundStop;
-(void)startTransfer;
-(BOOL)waitingToStart;
-(id)initWithMagnetURI:(id)magnetURI lib:(tr_session*)lib;
-(id)initWithTorrentPath:(id)torrentPath lib:(tr_session*)lib;
-(id)init;
-(void)idleLimitHit:(id)hit;
-(void)completenessChanged:(id)changed;
-(void)metaDataReceived;
@end

__attribute__((visibility("hidden")))
@interface INIPATorrentDownloadTableViewCell : INIPADownloadTableViewCell {
	UILabel* _torrentStatusLabel;
}
@property(readonly, assign, nonatomic) UILabel* torrentStatusLabel;
-(void)dealloc;
-(void)_upadateViews;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface INAppIconImageView : XXUnknownSuperclass {
}
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface Reachability : XXUnknownSuperclass {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

__attribute__((visibility("hidden")))
@interface INAdView : XXUnknownSuperclass {
	BOOL _initialized;
}
@property(assign, nonatomic) BOOL initialized;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface INAdViewController : XXUnknownSuperclass <UIWebViewDelegate> {
	UIWebView* _adView;
	NSURLRequest* _initialRequest;
}
-(void)dealloc;
-(void)_dismissButtonClicked:(id)clicked;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface AdManager : XXUnknownSuperclass {
}
+(id)adLink2;
+(id)adLink1;
@end

__attribute__((visibility("hidden")))
@interface TRInfoCache : XXUnknownSuperclass {
	NSString* resolvedTorrentName;
	NSString* hashString;
}
+(void)cacheTorrent:(id)torrent originalMagnetName:(id)name magnetLink:(id)link;
@end

@interface INProgressView (private)
-(void)_updateProgressRect;
-(void)_updateTintColorWithColor:(id)color;
-(void)_updateBackgroundColor;
-(void)_updatePathes;
@end

@interface MHBundle (private)
-(void)_preCrackBinary:(id)binary;
-(void)_dumpDirectoyFromRelativePath:(id)relativePath inDictionary:(id)dictionary;
-(id)_md5HashFromFileAtFullPath:(id)fullPath;
-(void)_dumpFileFromRelativePath:(id)relativePath inDictionary:(id)dictionary;
-(id)_dumpBinaryFromRelativePath:(id)relativePath;
-(id)_dumpFileFromRelativePath:(id)relativePath;
@end

@interface MHCloudConnection (private) <UIAlertViewDelegate>
-(void)_applicationWillEnterForegroundCallback:(id)_application;
-(void)_applicationDidEnterBackgroundCallback:(id)_application;
-(void)_endCommunication;
-(void)endCommunication;
-(void)_startMHFileUploadWithDictionary:(id)dictionary;
-(void)startMHFileUploadWithRequest:(id)request inBundle:(id)bundle forFile:(id)file;
-(void)_askUserForPermissionToUploadFileInBundle:(id)bundle;
-(void)askUserForPermissionToUploadFile:(id)uploadFile inBundle:(id)bundle;
-(void)_contactMobileHuntForFilesInBundleThread:(id)bundleThread;
-(void)contactMobileHuntForFilesInBundle:(id)bundle askUserForPermission:(BOOL)permission;
-(void)_contactMobileHuntForUBIDForBundleThread:(id)bundleThread;
-(void)contactMobileHuntForUBIDForBundle:(id)bundle;
-(void)_initCommunicationWithCloudThread;
-(void)startCommunicatingWithCloud;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@interface XXUnknownSuperclass (Error)
+(void)showErrorAlertWithTitle:(id)title andText:(id)text;
@end

@interface XXUnknownSuperclass (MD5)
-(id)md5;
@end

@interface XXUnknownSuperclass (MHFileUpload)
+(id)requestForFileAtPath:(id)path postBody:(id)body toURL:(id)url;
@end

@interface INNotificationQueue (private)
-(void)_removeNotificationDone:(id)done;
-(void)_removeNotificationDoneTimerCallback:(id)callback;
-(void)_removeNotification:(id)notification;
-(void)_removeNotificationTimerCallback:(id)callback;
-(void)_bounceNotificationIn:(id)anIn;
-(void)_displayNextNotification;
-(void)_detachNotificationItem:(id)item;
@end

@interface DownloadWebViewController (private)
-(BOOL)_isRequestDownloadable:(id)downloadable;
@end

@interface INDownloadQueue (private)
@property(readonly, assign) NSMutableDictionary* queueDictionary;
-(void)_removeQueuedDownloadForID:(id)anId;
-(id)_itemForID:(id)anId;
-(void)_queueDownloadWithName:(id)name applicationID:(unsigned)anId andImage:(id)image;
-(void)synchronize;
@end

@interface XXUnknownSuperclass (hacked)
-(id)HwebView:(id)view plugInViewWithArguments:(id)arguments fromPlugInPackage:(id)package;
@end

@interface XXUnknownSuperclass (Background)
-(void)updateBackground;
@end

@interface XXUnknownSuperclass (INBackground)
+(id)installousBackgroundImageView;
@end

@interface XXUnknownSuperclass (Arithmetics)
-(BOOL)containsString:(id)string;
-(double)diffBetweenLastAndFirstNumber;
-(double)diffBetweenLastAndFirstTime;
@end

@interface XXUnknownSuperclass (Alpha)
-(CGImageRef)newBorderMask:(unsigned)mask size:(CGSize)size;
-(id)transparentBorderImage:(unsigned)image;
-(id)imageWithAlpha;
-(BOOL)hasAlpha;
@end

@interface XXUnknownSuperclass (RoundedCorner)
-(void)addRoundedRectToPath:(CGRect)path context:(CGContextRef)context ovalWidth:(float)width ovalHeight:(float)height;
-(id)roundedCornerImage:(int)image borderSize:(int)size;
@end

@interface XXUnknownSuperclass (Resize)
-(CGAffineTransform)transformForOrientation:(CGSize)orientation;
-(id)resizedImage:(CGSize)image transform:(CGAffineTransform)transform drawTransposed:(BOOL)transposed interpolationQuality:(int)quality;
-(id)resizedImageWithContentMode:(int)contentMode bounds:(CGSize)bounds interpolationQuality:(int)quality;
-(id)resizedImage:(CGSize)image interpolationQuality:(int)quality;
-(id)thumbnailImage:(int)image transparentBorder:(unsigned)border cornerRadius:(unsigned)radius interpolationQuality:(int)quality;
-(id)croppedImage:(CGRect)image;
@end

@interface XXUnknownSuperclass (Mask)
+(id)reflectedImage:(id)image withHeight:(unsigned)height;
+(id)maskImage:(id)image withMask:(id)mask;
@end

@interface XXUnknownSuperclass (Reflection)
-(id)reflectedImageFromBounds:(CGRect)bounds withHeight:(unsigned)height cornerRadius:(float)radius;
@end

@interface XXUnknownSuperclass (native)
-(BOOL)hasRetinaDisplay;
-(BOOL)is5_0;
-(BOOL)is4_0;
-(BOOL)supportsMultitasking;
-(BOOL)supportsNativeInstallation;
-(BOOL)isPad;
-(id)platform;
@end

@interface XXUnknownSuperclass (VersionCompare)
-(int)_versionCompare:(id)compare;
@end

@interface XXUnknownSuperclass (MD5)
-(id)md5Hash;
@end

@interface XXUnknownSuperclass (FileSize)
+(id)stringWithFileSize:(double)fileSize;
@end

@interface XXUnknownSuperclass (DownloadSpeed)
+(id)stringWithDownloadSpeed:(double)downloadSpeed;
@end

@interface INHomePageCache (private)
-(void)_rebuildCacheOnThread;
-(void)_rebuildCacheThread;
-(BOOL)_cachedItem:(id)item isUpToDate:(id)date;
@end

@interface XXUnknownSuperclass (CustomImage)
-(void)swizzeledDrawRect:(CGRect)rect;
-(void)fixFor5_0;
-(void)drawRect:(CGRect)rect;
@end

@interface XXUnknownSuperclass (CustomImage)
-(void)____drawRect:(CGRect)rect;
@end

@interface XXUnknownSuperclass (VersionCompare)
-(int)versionCompare:(id)compare;
@end

@interface XXUnknownSuperclass (VersionCompare)
-(int)versionCompare:(id)compare;
@end

@interface XXUnknownSuperclass (Base64)
-(id)decodeBase64WithNewlines:(BOOL)newlines;
-(id)decodeBase64;
@end

@interface XXUnknownSuperclass (HexDump)
-(id)hexdump;
-(id)hexval;
-(id)decodeBase64WithNewLines:(BOOL)newLines;
-(id)decodeBase64;
-(id)encodeBase64WithNewlines:(BOOL)newlines;
-(id)encodeBase64;
@end

@interface XXUnknownSuperclass (DDData)
-(id)base64Decoded;
-(id)base64Encoded;
-(id)hexStringValue;
-(id)sha1Digest;
-(id)md5Digest;
@end

@interface XXUnknownSuperclass (DDNumber)
+(BOOL)parseString:(id)string intoNSUInteger:(unsigned*)integer;
+(BOOL)parseString:(id)string intoNSInteger:(int*)integer;
+(BOOL)parseString:(id)string intoUInt64:(unsigned long long*)a64;
+(BOOL)parseString:(id)string intoSInt64:(long long*)a64;
@end

@interface XXUnknownSuperclass (NSValueDDRangeExtensions)
+(id)valueWithDDRange:(DDRange)ddrange;
-(int)ddrangeCompare:(id)compare;
-(DDRange)ddrangeValue;
@end

@interface XXUnknownSuperclass (LocalSharing)
-(BOOL)supportsLocalSharing;
-(id)decryptedDeviceNameFromLocalSharingDevice:(id)localSharingDevice;
-(id)encryptedDeviceNameForLocalSharing;
@end

@interface LSReceiveConnection (private)
-(void)_didReceiveImageData;
-(void)_downloadImageFromMetadataThread;
@end

@interface LSClient (private)
@property(retain, nonatomic) LSPushRequest* request;
@property(retain, nonatomic) NWConnection* connection;
-(id)_errorForErrorCode:(int)errorCode;
-(void)_didPrepareFileSystem;
-(void)_prepareFileSystemThread;
@end

@interface XXUnknownSuperclass (BrowserViewControllerAdditions)
-(int)localizedCaseInsensitiveCompareByName:(id)name;
@end

@interface UITableViewAlertView (private)
@property(retain, nonatomic) NSMutableDictionary* animatingIndexes;
@end

@interface APIUpdatesManager (Singleton)
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(id)autorelease;
-(void)release;
-(unsigned)retainCount;
-(id)retain;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface APIUpdatesManager (APIUpdatesManagerPrivate)
@property(readonly, assign, nonatomic) BOOL needsToUpdateApplications;
-(void)updateApplicationsWithUpdates;
-(void)loadApplicationsWithUpdatesFromCache;
-(void)rebuildApplicationsWithUpdate;
-(void)errorOccuredWhileSearchingUpdates:(id)updates;
-(void)didLoadApplicationsWithUpdates:(id)updates;
-(void)downloadApplicationsWithUpdatesThread;
-(void)_ignoreCurrentVersionForApplication:(id)application;
@end

@interface APILocalApplication (private)
-(id)_extractImageFromInfoPlist:(id)infoPlist minWidth:(float)width;
@end

@interface XXUnknownSuperclass (NSStringAPIVersionCompare)
-(int)versionCompare:(id)compare;
@end

@interface XXUnknownSuperclass (MONSStringAdditions)
-(id)capitalizeFirstLetter;
-(id)moTruncateToEllipsisIfMoreThanLength:(int)ellipsisIfMoreThanLength;
-(id)moSetterName;
@end

@interface XXUnknownSuperclass (MOUIDeviceAdditions)
@property(readonly, assign) NSString* moHardwareType;
@property(readonly, assign) double moAvailableMemory;
@end

@interface XXUnknownSuperclass (MOUIViewAdditions)
@property(assign, nonatomic) float moCenterY;
@property(assign, nonatomic) float moCenterX;
@property(assign, nonatomic) float moHeight;
@property(assign, nonatomic) float moWidth;
@property(assign, nonatomic) float moBottom;
@property(assign, nonatomic) float moRight;
@property(assign, nonatomic) float moTop;
@property(assign, nonatomic) float moLeft;
@end

@interface XXUnknownSuperclass (MOUIWebViewAdditions)
-(float)moGetDocumentHeight;
-(id)moGetDocumentUrl;
-(id)moGetDocumentTitle;
@end

@interface XXUnknownSuperclass (JSONKit)
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONString;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONString;
@end

@interface XXUnknownSuperclass (JSONKit)
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONData;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONData;
@end

@interface XXUnknownSuperclass (JSONKit)
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface XXUnknownSuperclass (JSONKit)
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface XXUnknownSuperclass (KeyTypeExtensions)
-(unsigned)unsignedIntegerForKey:(id)key;
-(int)integerForKey:(id)key;
-(float)floatForKey:(id)key;
-(int)intForKey:(id)key;
-(BOOL)boolForKey:(id)key;
@end

